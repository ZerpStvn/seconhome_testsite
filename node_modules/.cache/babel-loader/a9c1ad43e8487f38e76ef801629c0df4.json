{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\src\\\\app\\\\pages\\\\admin\\\\client\\\\mainSearch.js\";\n\nimport React, { useState } from \"react\";\nimport { GoogleMap, LoadScript, StandaloneSearchBox } from \"@react-google-maps/api\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng, geocodeByPlaceId } from \"react-places-autocomplete\";\n\nvar MapComponent = function MapComponent() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      address = _useState2[0],\n      setAddress = _useState2[1];\n\n  var _useState3 = useState({\n    lat: null,\n    lng: null\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      coordinates = _useState4[0],\n      setCoordinates = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      category = _useState6[0],\n      setCategory = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      neighbors = _useState8[0],\n      setNeighbors = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      country = _useState10[0],\n      setCountry = _useState10[1];\n\n  var handleSelect = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, placeId) {\n      var results, latLng, placeDetails, addressComponents, city, neighborhood, country;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return geocodeByAddress(value);\n\n            case 2:\n              results = _context.sent;\n              _context.next = 5;\n              return getLatLng(results[0]);\n\n            case 5:\n              latLng = _context.sent;\n              setAddress(value);\n              setCoordinates(latLng);\n              setCategory(\"\");\n              setNeighbors([]);\n              setCountry(\"\");\n              _context.next = 13;\n              return geocodeByPlaceId(placeId);\n\n            case 13:\n              placeDetails = _context.sent;\n              addressComponents = placeDetails[0].address_components;\n              city = addressComponents.find(function (component) {\n                return component.types[0] === \"locality\";\n              }).long_name;\n              neighborhood = addressComponents.find(function (component) {\n                return component.types[0] === \"neighborhood\";\n              }).long_name;\n              country = addressComponents.find(function (component) {\n                return component.types[0] === \"country\";\n              }).long_name;\n              setAddress(value);\n              setCoordinates(latLng);\n              setCategory(city);\n              setNeighbors([neighborhood]);\n              setCountry(country);\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSelect(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(LoadScript, {\n    googleMapsApiKey: \"YOUR_API_KEY\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n    value: address,\n    onChange: setAddress,\n    onSelect: handleSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, function (_ref2) {\n    var getInputProps = _ref2.getInputProps,\n        suggestions = _ref2.suggestions,\n        getSuggestionItemProps = _ref2.getSuggestionItemProps,\n        loading = _ref2.loading;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps({\n      placeholder: \"Enter a location\"\n    }), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 26\n      }\n    }, \"Loading...\") : null, suggestions.map(function (suggestion) {\n      var style = {\n        backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\n      };\n      var cityMatched = suggestion.types.includes(\"locality\");\n      var neighborhoodMatched = suggestion.types.includes(\"neighborhood\");\n      var countryMatched = suggestion.types.includes(\"country\");\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n        style: style\n      }), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 19\n        }\n      }), cityMatched && /*#__PURE__*/React.createElement(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 37\n        }\n      }, \"City: \", suggestion.description), neighborhoodMatched && /*#__PURE__*/React.createElement(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 23\n        }\n      }, \"Neighborhood: \", suggestion.description), countryMatched && /*#__PURE__*/React.createElement(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 23\n        }\n      }, \"Country: \", suggestion.description));\n    })));\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: {\n      height: \"400px\",\n      width: \"100%\"\n    },\n    center: coordinates,\n    zoom: 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Category: \", category), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Neighbors: \", neighbors.join(\", \")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Country: \", country)));\n};\n\nexport default MapComponent;","map":{"version":3,"sources":["C:/xampp/htdocs/wordpress/dashboard/src/app/pages/admin/client/mainSearch.js"],"names":["React","useState","GoogleMap","LoadScript","StandaloneSearchBox","PlacesAutocomplete","geocodeByAddress","getLatLng","geocodeByPlaceId","MapComponent","address","setAddress","lat","lng","coordinates","setCoordinates","category","setCategory","neighbors","setNeighbors","country","setCountry","handleSelect","value","placeId","results","latLng","placeDetails","addressComponents","address_components","city","find","component","types","long_name","neighborhood","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","backgroundColor","active","cityMatched","includes","neighborhoodMatched","countryMatched","description","height","width","join"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  StandaloneSearchBox,\r\n} from \"@react-google-maps/api\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n  geocodeByPlaceId,\r\n} from \"react-places-autocomplete\";\r\n\r\nconst MapComponent = () => {\r\n  const [address, setAddress] = useState(\"\");\r\n  const [coordinates, setCoordinates] = useState({ lat: null, lng: null });\r\n  const [category, setCategory] = useState(\"\");\r\n  const [neighbors, setNeighbors] = useState([]);\r\n  const [country, setCountry] = useState(\"\");\r\n\r\n  const handleSelect = async (value, placeId) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n\r\n    setAddress(value);\r\n    setCoordinates(latLng);\r\n    setCategory(\"\");\r\n    setNeighbors([]);\r\n    setCountry(\"\");\r\n\r\n    const placeDetails = await geocodeByPlaceId(placeId);\r\n    const addressComponents = placeDetails[0].address_components;\r\n\r\n    const city = addressComponents.find(\r\n      (component) => component.types[0] === \"locality\"\r\n    ).long_name;\r\n\r\n    const neighborhood = addressComponents.find(\r\n      (component) => component.types[0] === \"neighborhood\"\r\n    ).long_name;\r\n\r\n    const country = addressComponents.find(\r\n      (component) => component.types[0] === \"country\"\r\n    ).long_name;\r\n\r\n    setAddress(value);\r\n    setCoordinates(latLng);\r\n    setCategory(city);\r\n    setNeighbors([neighborhood]);\r\n    setCountry(country);\r\n  };\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"YOUR_API_KEY\">\r\n      <PlacesAutocomplete\r\n        value={address}\r\n        onChange={setAddress}\r\n        onSelect={handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <input {...getInputProps({ placeholder: \"Enter a location\" })} />\r\n            <div>\r\n              {loading ? <div>Loading...</div> : null}\r\n              {suggestions.map((suggestion) => {\r\n                const style = {\r\n                  backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\",\r\n                };\r\n                const cityMatched = suggestion.types.includes(\"locality\");\r\n                const neighborhoodMatched = suggestion.types.includes(\r\n                  \"neighborhood\"\r\n                );\r\n                const countryMatched = suggestion.types.includes(\"country\");\r\n\r\n                return (\r\n                  <div {...getSuggestionItemProps(suggestion, { style })}>\r\n                    {cityMatched && <span>City: {suggestion.description}</span>}\r\n                    {neighborhoodMatched && (\r\n                      <span>Neighborhood: {suggestion.description}</span>\r\n                    )}\r\n                    {countryMatched && (\r\n                      <span>Country: {suggestion.description}</span>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n      <GoogleMap\r\n        mapContainerStyle={{ height: \"400px\", width: \"100%\" }}\r\n        center={coordinates}\r\n        zoom={10}\r\n      />\r\n      <div>\r\n        <p>Category: {category}</p>\r\n        <p>Neighbors: {neighbors.join(\", \")}</p>\r\n        <p>Country: {country}</p>\r\n      </div>\r\n    </LoadScript>\r\n  );\r\n};\r\nexport default MapComponent;\r\n"]},"metadata":{},"sourceType":"module"}