{"ast":null,"code":"import _objectSpread from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\src\\\\app\\\\components\\\\autocomplete.js\";\nimport { Col, Input, Row } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/autoComplete-search.css\";\n\nfunction AutoCompleteComponent() {\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      autoComplete = _useState2[0],\n      setAutoComplete = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      citySuggestions = _useState4[0],\n      setCitySuggestions = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      neighborhoodSuggestions = _useState6[0],\n      setNeighborhoodSuggestions = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      countySuggestions = _useState8[0],\n      setCountySuggestions = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isNumber = _useState10[0],\n      setIsNumber = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      zipcodeSuggestions = _useState12[0],\n      setZipcodeSuggestions = _useState12[1];\n\n  var zipcode_city = useState();\n  useEffect(function () {\n    var script = document.createElement(\"script\");\n    script.src = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyA6eaMRrfLzlYUe-H1sL6D9tkVXjS6O7BQ&libraries=places\";\n    script.async = true;\n    script.defer = true;\n    document.body.appendChild(script);\n    return function () {\n      document.body.removeChild(script);\n    };\n  }, []);\n\n  var handleAutoCompleteView = function handleAutoCompleteView(data) {\n    var trimmedData = data.trim();\n\n    if (trimmedData !== \"\") {\n      setAutoComplete(true);\n\n      if (!isNaN(trimmedData)) {\n        setIsNumber(true);\n        fetchZipcode(trimmedData);\n      } else {\n        setIsNumber(false);\n        fetchCity(trimmedData);\n      }\n\n      fetchNeighborhood(trimmedData);\n      fetchCounty(trimmedData);\n    } else {\n      setAutoComplete(false);\n      setCitySuggestions([]);\n      setNeighborhoodSuggestions([]);\n      setCountySuggestions([]);\n      setZipcodeSuggestions([]);\n    }\n  };\n\n  var fetchCity = function fetchCity(input) {\n    var autocompleteService = new window.google.maps.places.AutocompleteService();\n    autocompleteService.getPlacePredictions({\n      input: input,\n      types: [\"(cities)\"],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }, function (predictions, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        var simplifiedSuggestions = predictions.map(function (prediction) {\n          var cityName = prediction.structured_formatting.main_text;\n          return _objectSpread({}, prediction, {\n            description: cityName\n          });\n        });\n        setCitySuggestions(simplifiedSuggestions);\n      }\n    });\n  };\n\n  var fetchNeighborhood = function fetchNeighborhood(input) {\n    var autocompleteService = new window.google.maps.places.AutocompleteService();\n    autocompleteService.getPlacePredictions({\n      input: input,\n      types: [\"neighborhood\"],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }, function (predictions, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        var simplifiedSuggestions = predictions.map(function (prediction) {\n          var neighborhoodName = prediction.structured_formatting.main_text;\n          return _objectSpread({}, prediction, {\n            description: neighborhoodName\n          });\n        });\n        setNeighborhoodSuggestions(simplifiedSuggestions);\n      }\n    });\n  };\n\n  var fetchCounty = function fetchCounty(input) {\n    var autocompleteService = new window.google.maps.places.AutocompleteService();\n    autocompleteService.getPlacePredictions({\n      input: input,\n      types: [\"administrative_area_level_2\"],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }, function (predictions, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        var simplifiedSuggestions = predictions.map(function (prediction) {\n          var countyName = prediction.structured_formatting.main_text;\n          return _objectSpread({}, prediction, {\n            description: countyName\n          });\n        });\n        setCountySuggestions(simplifiedSuggestions);\n      }\n    });\n  };\n\n  var fetchZipcode = function fetchZipcode(input) {\n    var autocompleteService = new window.google.maps.places.AutocompleteService();\n    autocompleteService.getPlacePredictions({\n      input: input,\n      types: [\"postal_code\"],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }, function (predictions, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        var simplifiedSuggestions = predictions.map(function (prediction) {\n          var postalCode = prediction.structured_formatting.main_text;\n          var city = prediction.structured_formatting.secondary_text.split(\",\")[0];\n          return _objectSpread({}, prediction, {\n            postalCode: postalCode,\n            city: city\n          });\n        });\n        setZipcodeSuggestions(simplifiedSuggestions);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"City, ZIP, School, Address\",\n    type: \"text\",\n    onChange: function onChange(e) {\n      handleAutoCompleteView(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }), autoComplete && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"auto_complete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, isNumber ? /*#__PURE__*/React.createElement(\"section\", {\n    className: \"suggestion suggestion_zipcode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }\n  }, \"ZIP CODES\"), zipcodeSuggestions.map(function (suggestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: suggestion.place_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 23\n      }\n    }, suggestion.postalCode));\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"suggestion suggestion_City\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, \"CITIES\"), citySuggestions.map(function (suggestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: suggestion.place_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    }, suggestion.description));\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"suggestion suggestion_neighborhood\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }, \"NEIGHBORHOODS\"), neighborhoodSuggestions.map(function (suggestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: suggestion.place_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 25\n      }\n    }, suggestion.description));\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"suggestion suggestion_county\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, \"COUNTIES\"), countySuggestions.map(function (suggestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: suggestion.place_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    }, suggestion.description));\n  })))))));\n}\n\nexport default AutoCompleteComponent;","map":{"version":3,"sources":["C:/xampp/htdocs/wordpress/dashboard/src/app/components/autocomplete.js"],"names":["Col","Input","Row","React","useState","useEffect","AutoCompleteComponent","autoComplete","setAutoComplete","citySuggestions","setCitySuggestions","neighborhoodSuggestions","setNeighborhoodSuggestions","countySuggestions","setCountySuggestions","isNumber","setIsNumber","zipcodeSuggestions","setZipcodeSuggestions","zipcode_city","script","document","createElement","src","async","defer","body","appendChild","removeChild","handleAutoCompleteView","data","trimmedData","trim","isNaN","fetchZipcode","fetchCity","fetchNeighborhood","fetchCounty","input","autocompleteService","window","google","maps","places","AutocompleteService","getPlacePredictions","types","componentRestrictions","country","predictions","status","PlacesServiceStatus","OK","simplifiedSuggestions","map","prediction","cityName","structured_formatting","main_text","description","neighborhoodName","countyName","postalCode","city","secondary_text","split","e","target","value","suggestion","place_id"],"mappings":"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","sourcesContent":["import { Col, Input, Row } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"../styles/autoComplete-search.css\";\r\n\r\nfunction AutoCompleteComponent() {\r\n  const [autoComplete, setAutoComplete] = useState(false);\r\n  const [citySuggestions, setCitySuggestions] = useState([]);\r\n  const [neighborhoodSuggestions, setNeighborhoodSuggestions] = useState([]);\r\n  const [countySuggestions, setCountySuggestions] = useState([]);\r\n  const [isNumber, setIsNumber] = useState(false);\r\n  const [zipcodeSuggestions, setZipcodeSuggestions] = useState([]);\r\n  const zipcode_city = useState();\r\n\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyA6eaMRrfLzlYUe-H1sL6D9tkVXjS6O7BQ&libraries=places`;\r\n    script.async = true;\r\n    script.defer = true;\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  const handleAutoCompleteView = (data) => {\r\n    const trimmedData = data.trim();\r\n\r\n    if (trimmedData !== \"\") {\r\n      setAutoComplete(true);\r\n\r\n      if (!isNaN(trimmedData)) {\r\n        setIsNumber(true);\r\n        fetchZipcode(trimmedData);\r\n      } else {\r\n        setIsNumber(false);\r\n        fetchCity(trimmedData);\r\n      }\r\n      fetchNeighborhood(trimmedData);\r\n      fetchCounty(trimmedData);\r\n    } else {\r\n      setAutoComplete(false);\r\n      setCitySuggestions([]);\r\n      setNeighborhoodSuggestions([]);\r\n      setCountySuggestions([]);\r\n      setZipcodeSuggestions([]);\r\n    }\r\n  };\r\n\r\n  const fetchCity = (input) => {\r\n    const autocompleteService = new window.google.maps.places.AutocompleteService();\r\n    autocompleteService.getPlacePredictions(\r\n      {\r\n        input: input,\r\n        types: [\"(cities)\"],\r\n        componentRestrictions: { country: \"us\" },\r\n      },\r\n      (predictions, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          const simplifiedSuggestions = predictions.map((prediction) => {\r\n            const cityName = prediction.structured_formatting.main_text;\r\n            return { ...prediction, description: cityName };\r\n          });\r\n          setCitySuggestions(simplifiedSuggestions);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const fetchNeighborhood = (input) => {\r\n    const autocompleteService = new window.google.maps.places.AutocompleteService();\r\n    autocompleteService.getPlacePredictions(\r\n      {\r\n        input: input,\r\n        types: [\"neighborhood\"],\r\n        componentRestrictions: { country: \"us\" },\r\n      },\r\n      (predictions, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          const simplifiedSuggestions = predictions.map((prediction) => {\r\n            const neighborhoodName = prediction.structured_formatting.main_text;\r\n            return { ...prediction, description: neighborhoodName };\r\n          });\r\n          setNeighborhoodSuggestions(simplifiedSuggestions);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const fetchCounty = (input) => {\r\n    const autocompleteService = new window.google.maps.places.AutocompleteService();\r\n    autocompleteService.getPlacePredictions(\r\n      {\r\n        input: input,\r\n        types: [\"administrative_area_level_2\"],\r\n        componentRestrictions: { country: \"us\" },\r\n      },\r\n      (predictions, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          const simplifiedSuggestions = predictions.map((prediction) => {\r\n            const countyName = prediction.structured_formatting.main_text;\r\n            return { ...prediction, description: countyName };\r\n          });\r\n          setCountySuggestions(simplifiedSuggestions);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const fetchZipcode = (input) => {\r\n    const autocompleteService = new window.google.maps.places.AutocompleteService();\r\n    autocompleteService.getPlacePredictions(\r\n      {\r\n        input: input,\r\n        types: [\"postal_code\"],\r\n        componentRestrictions: { country: \"us\" },\r\n      },\r\n      (predictions, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          const simplifiedSuggestions = predictions.map((prediction) => {\r\n            const postalCode = prediction.structured_formatting.main_text;\r\n            const city = prediction.structured_formatting.secondary_text.split(\r\n              \",\"\r\n            )[0];\r\n\r\n            return { ...prediction, postalCode: postalCode, city: city };\r\n          });\r\n          setZipcodeSuggestions(simplifiedSuggestions);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Input\r\n        placeholder=\"City, ZIP, School, Address\"\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          handleAutoCompleteView(e.target.value);\r\n        }}\r\n      />\r\n      {autoComplete && (\r\n        <div className=\"auto_complete\">\r\n          <ul>\r\n            <li>\r\n              {isNumber ? (\r\n                <section className=\"suggestion suggestion_zipcode\">\r\n                  <h2>ZIP CODES</h2>\r\n                  {zipcodeSuggestions.map((suggestion) => (\r\n                    <div key={suggestion.place_id}>\r\n                      <p>{suggestion.postalCode}</p>\r\n                    </div>\r\n                  ))}\r\n                </section>\r\n              ) : (\r\n                <>\r\n                  <section className=\"suggestion suggestion_City\">\r\n                    <h2>CITIES</h2>\r\n                    {citySuggestions.map((suggestion) => (\r\n                      <div key={suggestion.place_id}>\r\n                        <p>{suggestion.description}</p>\r\n                      </div>\r\n                    ))}\r\n                  </section>\r\n\r\n                  <section className=\"suggestion suggestion_neighborhood\">\r\n                    <h2>NEIGHBORHOODS</h2>\r\n                    {neighborhoodSuggestions.map((suggestion) => (\r\n                      <div key={suggestion.place_id}>\r\n                        <p>{suggestion.description}</p>\r\n                      </div>\r\n                    ))}\r\n                  </section>\r\n\r\n                  <section className=\"suggestion suggestion_county\">\r\n                    <h2>COUNTIES</h2>\r\n                    {countySuggestions.map((suggestion) => (\r\n                      <div key={suggestion.place_id}>\r\n                        <p>{suggestion.description}</p>\r\n                      </div>\r\n                    ))}\r\n                  </section>\r\n                </>\r\n              )}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default AutoCompleteComponent;\r\n"]},"metadata":{},"sourceType":"module"}