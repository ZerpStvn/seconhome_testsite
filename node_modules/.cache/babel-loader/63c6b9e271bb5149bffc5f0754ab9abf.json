{"ast":null,"code":"import _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\src\\\\app\\\\pages\\\\admin\\\\client\\\\mainSearch.js\";\nimport { Col, Input, Row } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../../../styles/autoComplete-search.css\";\n\nfunction MainSearch() {\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      autoComplete = _useState2[0],\n      setAutoComplete = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      suggestions = _useState4[0],\n      setSuggestions = _useState4[1];\n\n  useEffect(function () {\n    var script = document.createElement(\"script\");\n    script.src = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyA6eaMRrfLzlYUe-H1sL6D9tkVXjS6O7BQ&libraries=places\";\n    script.async = true;\n    script.defer = true;\n    document.body.appendChild(script);\n    return function () {\n      document.body.removeChild(script);\n    };\n  }, []);\n\n  var handleAutoCompleteView = function handleAutoCompleteView(data) {\n    if (data.trim() !== \"\") {\n      setAutoComplete(true);\n      fetchSuggestions(data);\n    } else {\n      setAutoComplete(false);\n      setSuggestions([]);\n    }\n  };\n\n  var fetchSuggestions = function fetchSuggestions(input) {\n    var autocompleteService = new window.google.maps.places.AutocompleteService();\n    autocompleteService.getPlacePredictions({\n      input: input,\n      types: [\"(cities)\"],\n      // Restrict results to cities\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }, function (predictions, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        setSuggestions(predictions);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    onChange: function onChange(e) {\n      handleAutoCompleteView(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), autoComplete && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"auto_complete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"suggestion_City\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"CITIES\"), suggestions.map(function (suggestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: suggestion.place_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, suggestion.description));\n  }))))));\n}\n\nexport default MainSearch;","map":{"version":3,"sources":["C:/xampp/htdocs/wordpress/dashboard/src/app/pages/admin/client/mainSearch.js"],"names":["Col","Input","Row","React","useState","useEffect","MainSearch","autoComplete","setAutoComplete","suggestions","setSuggestions","script","document","createElement","src","async","defer","body","appendChild","removeChild","handleAutoCompleteView","data","trim","fetchSuggestions","input","autocompleteService","window","google","maps","places","AutocompleteService","getPlacePredictions","types","componentRestrictions","country","predictions","status","PlacesServiceStatus","OK","e","target","value","map","suggestion","place_id","description"],"mappings":"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","sourcesContent":["import { Col, Input, Row } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"../../../styles/autoComplete-search.css\";\r\n\r\nfunction MainSearch() {\r\n  const [autoComplete, setAutoComplete] = useState(false);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyA6eaMRrfLzlYUe-H1sL6D9tkVXjS6O7BQ&libraries=places`;\r\n    script.async = true;\r\n    script.defer = true;\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  const handleAutoCompleteView = (data) => {\r\n    if (data.trim() !== \"\") {\r\n      setAutoComplete(true);\r\n      fetchSuggestions(data);\r\n    } else {\r\n      setAutoComplete(false);\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  const fetchSuggestions = (input) => {\r\n    const autocompleteService = new window.google.maps.places.AutocompleteService();\r\n    autocompleteService.getPlacePredictions(\r\n      {\r\n        input: input,\r\n        types: [\"(cities)\"], // Restrict results to cities\r\n        componentRestrictions: { country: \"us\" },\r\n      },\r\n      (predictions, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          setSuggestions(predictions);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Input\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          handleAutoCompleteView(e.target.value);\r\n        }}\r\n      />\r\n      {autoComplete && (\r\n        <div className=\"auto_complete\">\r\n          <ul>\r\n            <li>\r\n              <section className=\"suggestion_City\">\r\n                <h2>CITIES</h2>\r\n                {suggestions.map((suggestion) => (\r\n                  <div key={suggestion.place_id}>\r\n                    <p>{suggestion.description}</p>\r\n                  </div>\r\n                ))}\r\n              </section>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default MainSearch;\r\n"]},"metadata":{},"sourceType":"module"}