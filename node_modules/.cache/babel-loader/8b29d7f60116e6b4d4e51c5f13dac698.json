{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\SFelizardo\\\\Desktop\\\\Projects\\\\secondhome\\\\second-home-referrals\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\SFelizardo\\\\Desktop\\\\Projects\\\\secondhome\\\\second-home-referrals\\\\src\\\\app\\\\pages\\\\home-owner\\\\tour\\\\partner-tour.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { listAllLeads as _listAllLeads, updateLead as _updateLead, setLeadListLoading as _setLeadListLoading } from \"../../../redux/actions/lead-actions\";\nimport { useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Tabs, Button, Table, Breadcrumb, Popconfirm, message } from \"antd\";\nimport { compose } from \"redux\";\nimport moment from 'moment';\nimport RescheduleTour from \"./RescheduleTour\";\nimport { humanize } from \"../../../helpers/string-helper\";\nvar TabPane = Tabs.TabPane;\n\nvar Tours = function Tours(_ref) {\n  var leadList = _ref.leadList,\n      leadListLoading = _ref.leadListLoading,\n      leadMessage = _ref.leadMessage,\n      leadUpdated = _ref.leadUpdated,\n      leadListMeta = _ref.leadListMeta;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      scheduleTour = _useState2[0],\n      setScheduleTour = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scheduledTour = _useState4[0],\n      setScheduledTour = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      pastTour = _useState6[0],\n      setPastTour = _useState6[1];\n\n  var dispatch = useDispatch();\n  var timeZone = new Date().getTimezoneOffset();\n  useEffect(function () {\n    leadListLoading && dispatch(_listAllLeads({\n      fields: ['*', \"client.*\", \"client.primary_resident.*\", \"home.*\"],\n      filter: {}\n    }));\n\n    if (leadList.length != 0) {\n      var tempScheduleTour = [];\n      var tempScheduledTour = [];\n      var tempPastTour = [];\n      leadList.forEach(function (Item, index) {\n        var finalTime;\n\n        if (Item.scheduled_date) {\n          var time = new Date(Item.scheduled_date).getTime();\n          finalTime = time + -timeZone * 60000;\n        }\n\n        if (Item.tour_status === 'scheduled' && new Date(Item.scheduled_date).getTime() < new Date().getTime()) {\n          tempPastTour.push({\n            key: index,\n            communityName: Item.home && humanize(Item.home.name),\n            clientName: Item.client && humanize(Item.client.name),\n            residentName: Item.client && Item.client.primary_resident ? humanize(Item.client.primary_resident.name) : '',\n            dateTime: Item.scheduled_date ? \"\".concat(moment(finalTime).format('MM-DD-YYYY'), \" \").concat(moment(finalTime).format('LT')) : \"N/A\"\n          });\n        } else if (Item.tour_status === 'scheduled') {\n          tempScheduledTour.push({\n            key: index,\n            communityName: Item.home && humanize(Item.home.name),\n            clientName: Item.client && humanize(Item.client.name),\n            residentName: Item.client && Item.client.primary_resident ? humanize(Item.client.primary_resident.name) : '',\n            dateTime: Item.scheduled_date ? \"\".concat(moment(finalTime).format('MM-DD-YYYY'), \" \").concat(moment(finalTime).format('LT')) : \"N/A\",\n            action: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RescheduleTour, {\n              LeadId: Item.id,\n              updateLeadData: updateLeadData,\n              Date: Item.scheduled_date && moment(new Date(finalTime), \"YYYY-MM-DD, hh:mm A\"),\n              buttonTitle: \"Reschedule\",\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 29\n              }\n            }), /*#__PURE__*/React.createElement(Popconfirm, {\n              title: \"Are you sure you want to cancel?\",\n              onConfirm: function onConfirm() {\n                return updateLeadData(Item.id, {\n                  tour_status: \"canceled\"\n                });\n              },\n              onCancel: popConfirmCancel,\n              okText: \"Yes\",\n              cancelText: \"No\",\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(Button, {\n              danger: true,\n              shape: \"round\",\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 30\n              }\n            }, \"Cancel\")))\n          });\n        } else {\n          tempScheduleTour.push({\n            key: index,\n            communityName: Item.home && humanize(Item.home.name),\n            clientName: Item.client && humanize(Item.client.name),\n            residentName: Item.client && Item.client.primary_resident ? humanize(Item.client.primary_resident.name) : '',\n            action: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RescheduleTour, {\n              LeadId: Item.id,\n              updateLeadData: updateLeadData,\n              Date: Item.scheduled_date && moment(new Date(finalTime), \"YYYY-MM-DD, hh:mm A\"),\n              buttonTitle: \"Schedule\",\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 29\n              }\n            }))\n          });\n        }\n      });\n      setScheduleTour(tempScheduleTour);\n      setScheduledTour(tempScheduledTour);\n      setPastTour(tempPastTour);\n    }\n\n    return function () {\n      console.log(\"Communities Unmounting\");\n    };\n  }, [leadUpdated, leadMessage, leadListLoading]);\n\n  var popConfirmCancel = function popConfirmCancel(e) {\n    console.log(e); // message.error('Click on No');\n  };\n\n  var updateLeadData = function updateLeadData(LeadId, Data) {\n    console.log('LeadId, Data => ', LeadId, Data);\n    dispatch(_updateLead(LeadId, Data));\n  };\n\n  var scheduledTourColumns = [{\n    title: 'Community Name',\n    dataIndex: 'communityName' //sorter: (a, b) => a.communityName.localeCompare(b.communityName),\n\n  }, {\n    title: 'Client Name',\n    dataIndex: 'clientName' //sorter: {\n    //     compare: (a, b) => a.clientName - b.clientName,\n    //     multiple: 3,\n    // },\n\n  }, {\n    title: 'Resident Name',\n    dataIndex: 'residentName' // sorter: {\n    //     compare: (a, b) => a.residentName - b.residentName,\n    //     multiple: 3,\n    // },\n\n  }, {\n    title: 'Date & Time',\n    dataIndex: 'dateTime' // sorter: (a, b) => a.dateTime.localeCompare(b.dateTime),\n\n  }, {\n    title: 'Action',\n    dataIndex: 'action' // sorter: {\n    //     compare: (a, b) => a.action - b.action,\n    //     multiple: 1,\n    // },\n\n  }];\n  var scheduleTourColumns = [{\n    title: 'Community Name',\n    dataIndex: 'communityName' // sorter: (a, b) => a.communityName.localeCompare(b.communityName),\n\n  }, {\n    title: 'Client Name',\n    dataIndex: 'clientName' // sorter: {\n    //     compare: (a, b) => a.clientName - b.clientName,\n    //     multiple: 3,\n    // },\n\n  }, {\n    title: 'Action',\n    dataIndex: 'action' // sorter: {\n    //     compare: (a, b) => a.action - b.action,\n    //     multiple: 1,\n    // },\n\n  }];\n  var pastTourColumns = [{\n    title: 'Community Name',\n    dataIndex: 'communityName' // sorter: {\n    //     compare: (a, b) => a.communityName - b.communityName,\n    //     multiple: 4,\n    // },\n\n  }, {\n    title: 'Client Name',\n    dataIndex: 'clientName' // sorter: {\n    //     compare: (a, b) => a.clientName - b.clientName,\n    //     multiple: 3,\n    // },\n\n  }, {\n    title: 'Resident Name',\n    dataIndex: 'residentName' // sorter: {\n    //     compare: (a, b) => a.residentName - b.residentName,\n    //     multiple: 3,\n    // },\n\n  }, {\n    title: 'Date & Time',\n    dataIndex: 'dateTime' // sorter: {\n    //     compare: (a, b) => a.dateTime - b.dateTime,\n    //     multiple: 2,\n    // },\n\n  }];\n\n  function onChange(pagination, filters, sorter, extra) {\n    console.log('params', pagination, filters, sorter, extra);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Breadcrumb, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/admin\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 21\n    }\n  }, \"Home\")), /*#__PURE__*/React.createElement(Breadcrumb.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }, \"Tours\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    defaultActiveKey: \"scheduleTour\",\n    onChange: function onChange() {\n      return console.log(0);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Scheduled Tour\",\n    key: \"scheduledTour\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    columns: scheduledTourColumns,\n    dataSource: scheduledTour,\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Past Tour\",\n    key: \"pastTour\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    columns: pastTourColumns,\n    dataSource: pastTour,\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 25\n    }\n  })))));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    leadList: state.lead.leadList,\n    leadListLoading: state.lead.leadListLoading,\n    leadListMeta: state.lead.leadListMeta\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    listAllLeads: function listAllLeads() {\n      return dispatch(_listAllLeads());\n    },\n    updateLead: function updateLead() {\n      return dispatch(_updateLead());\n    },\n    setLeadListLoading: function setLeadListLoading() {\n      return dispatch(_setLeadListLoading());\n    }\n  };\n}\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(Tours);","map":{"version":3,"sources":["C:/Users/SFelizardo/Desktop/Projects/secondhome/second-home-referrals/src/app/pages/home-owner/tour/partner-tour.js"],"names":["React","useEffect","useState","connect","listAllLeads","updateLead","setLeadListLoading","useDispatch","Link","Tabs","Button","Table","Breadcrumb","Popconfirm","message","compose","moment","RescheduleTour","humanize","TabPane","Tours","leadList","leadListLoading","leadMessage","leadUpdated","leadListMeta","scheduleTour","setScheduleTour","scheduledTour","setScheduledTour","pastTour","setPastTour","dispatch","timeZone","Date","getTimezoneOffset","fields","filter","length","tempScheduleTour","tempScheduledTour","tempPastTour","forEach","Item","index","finalTime","scheduled_date","time","getTime","tour_status","push","key","communityName","home","name","clientName","client","residentName","primary_resident","dateTime","format","action","id","updateLeadData","popConfirmCancel","console","log","e","LeadId","Data","scheduledTourColumns","title","dataIndex","scheduleTourColumns","pastTourColumns","onChange","pagination","filters","sorter","extra","mapStateToProps","state","lead","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { listAllLeads, updateLead, setLeadListLoading } from \"../../../redux/actions/lead-actions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Tabs, Button, Table, Breadcrumb, Popconfirm, message } from \"antd\";\r\nimport { compose } from \"redux\";\r\nimport moment from 'moment';\r\nimport RescheduleTour from \"./RescheduleTour\";\r\nimport { humanize } from \"../../../helpers/string-helper\";\r\n\r\n\r\n\r\n\r\nconst { TabPane } = Tabs;\r\nconst Tours = ({ leadList, leadListLoading, leadMessage, leadUpdated, leadListMeta }) => {\r\n\r\n    const [scheduleTour, setScheduleTour] = useState([]);\r\n    const [scheduledTour, setScheduledTour] = useState([]);\r\n    const [pastTour, setPastTour] = useState([]);\r\n    const dispatch = useDispatch();\r\n    const timeZone = new Date().getTimezoneOffset();\r\n\r\n    useEffect(() => {\r\n        leadListLoading && dispatch(listAllLeads({ fields: ['*', \"client.*\", \"client.primary_resident.*\", \"home.*\"], filter: {} }));\r\n\r\n        if (leadList.length != 0) {\r\n            let tempScheduleTour = [];\r\n            let tempScheduledTour = [];\r\n            let tempPastTour = [];\r\n            leadList.forEach((Item, index) => {\r\n                let finalTime;\r\n                if (Item.scheduled_date) {\r\n                    let time = new Date(Item.scheduled_date).getTime();\r\n                    finalTime = time + (-timeZone * 60000)\r\n\r\n                }\r\n                if (Item.tour_status === 'scheduled' && (new Date(Item.scheduled_date).getTime() < new Date().getTime())) {\r\n                    tempPastTour.push({\r\n                        key: index,\r\n                        communityName: Item.home && humanize(Item.home.name),\r\n                        clientName: Item.client && humanize(Item.client.name),\r\n                        residentName: (Item.client && Item.client.primary_resident) ? humanize(Item.client.primary_resident.name) : '',\r\n                        dateTime: Item.scheduled_date ? `${moment(finalTime).format('MM-DD-YYYY')} ${moment(finalTime).format('LT')}` : \"N/A\",\r\n                    });\r\n                }\r\n                else if (Item.tour_status === 'scheduled') {\r\n                    tempScheduledTour.push({\r\n                        key: index,\r\n                        communityName: Item.home && humanize(Item.home.name),\r\n                        clientName: Item.client && humanize(Item.client.name),\r\n                        residentName: (Item.client && Item.client.primary_resident) ? humanize(Item.client.primary_resident.name) : '',\r\n                        dateTime: Item.scheduled_date ? `${moment(finalTime).format('MM-DD-YYYY')} ${moment(finalTime).format('LT')}` : \"N/A\",\r\n                        action: <>\r\n                            <RescheduleTour LeadId={Item.id} updateLeadData={updateLeadData} Date={Item.scheduled_date && moment(new Date(finalTime), \"YYYY-MM-DD, hh:mm A\")} buttonTitle={\"Reschedule\"} />\r\n                            <Popconfirm\r\n                                title=\"Are you sure you want to cancel?\"\r\n                                onConfirm={() => updateLeadData(Item.id, { tour_status: \"canceled\" })}\r\n                                onCancel={popConfirmCancel}\r\n                                okText=\"Yes\"\r\n                                cancelText=\"No\"\r\n                            ><Button danger shape=\"round\" >Cancel</Button>\r\n                            </Popconfirm></>,\r\n                    });\r\n                }\r\n                else {\r\n                    tempScheduleTour.push({\r\n                        key: index,\r\n                        communityName: Item.home && humanize(Item.home.name),\r\n                        clientName: Item.client && humanize(Item.client.name),\r\n                        residentName: (Item.client && Item.client.primary_resident) ? humanize(Item.client.primary_resident.name) : '',\r\n                        action: <>\r\n                            <RescheduleTour LeadId={Item.id} updateLeadData={updateLeadData} Date={Item.scheduled_date && moment(new Date(finalTime), \"YYYY-MM-DD, hh:mm A\")} buttonTitle={\"Schedule\"} /></>,\r\n                    });\r\n                }\r\n            });\r\n            setScheduleTour(tempScheduleTour);\r\n            setScheduledTour(tempScheduledTour);\r\n            setPastTour(tempPastTour);\r\n        }\r\n\r\n        return () => {\r\n            console.log(\"Communities Unmounting\");\r\n        };\r\n    }, [leadUpdated, leadMessage, leadListLoading]);\r\n\r\n    const popConfirmCancel = (e) => {\r\n        console.log(e);\r\n        // message.error('Click on No');\r\n    }\r\n\r\n    const updateLeadData = (LeadId, Data) => {\r\n        console.log('LeadId, Data => ', LeadId, Data);\r\n        dispatch(updateLead(LeadId, Data));\r\n    }\r\n\r\n    const scheduledTourColumns = [\r\n        {\r\n            title: 'Community Name',\r\n            dataIndex: 'communityName',\r\n            //sorter: (a, b) => a.communityName.localeCompare(b.communityName),\r\n        },\r\n        {\r\n            title: 'Client Name',\r\n            dataIndex: 'clientName',\r\n            //sorter: {\r\n            //     compare: (a, b) => a.clientName - b.clientName,\r\n            //     multiple: 3,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Resident Name',\r\n            dataIndex: 'residentName',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.residentName - b.residentName,\r\n            //     multiple: 3,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Date & Time',\r\n            dataIndex: 'dateTime',\r\n            // sorter: (a, b) => a.dateTime.localeCompare(b.dateTime),\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'action',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.action - b.action,\r\n            //     multiple: 1,\r\n            // },\r\n        },\r\n    ];\r\n    const scheduleTourColumns = [\r\n        {\r\n            title: 'Community Name',\r\n            dataIndex: 'communityName',\r\n            // sorter: (a, b) => a.communityName.localeCompare(b.communityName),\r\n        },\r\n        {\r\n            title: 'Client Name',\r\n            dataIndex: 'clientName',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.clientName - b.clientName,\r\n            //     multiple: 3,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'action',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.action - b.action,\r\n            //     multiple: 1,\r\n            // },\r\n        },\r\n    ];\r\n    const pastTourColumns = [\r\n        {\r\n            title: 'Community Name',\r\n            dataIndex: 'communityName',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.communityName - b.communityName,\r\n            //     multiple: 4,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Client Name',\r\n            dataIndex: 'clientName',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.clientName - b.clientName,\r\n            //     multiple: 3,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Resident Name',\r\n            dataIndex: 'residentName',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.residentName - b.residentName,\r\n            //     multiple: 3,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Date & Time',\r\n            dataIndex: 'dateTime',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.dateTime - b.dateTime,\r\n            //     multiple: 2,\r\n            // },\r\n        },\r\n    ];\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Breadcrumb>\r\n                <Breadcrumb.Item>\r\n                    <Link to=\"/admin\">Home</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item>\r\n                    <Link to=\"\">Tours</Link>\r\n                </Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <div>\r\n                <Tabs defaultActiveKey=\"scheduleTour\" onChange={() => console.log(0)}>\r\n                    {/* <TabPane tab=\"Schedule Tour\" key=\"scheduleTour\">\r\n                        <Table columns={scheduleTourColumns} dataSource={scheduleTour} onChange={onChange} />\r\n                    </TabPane> */}\r\n                    <TabPane tab=\"Scheduled Tour\" key=\"scheduledTour\">\r\n                        <Table columns={scheduledTourColumns} dataSource={scheduledTour} onChange={onChange} />\r\n                    </TabPane>\r\n                    <TabPane tab=\"Past Tour\" key=\"pastTour\">\r\n                        <Table columns={pastTourColumns} dataSource={pastTour} onChange={onChange} />\r\n                    </TabPane>\r\n                </Tabs>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        leadList: state.lead.leadList,\r\n        leadListLoading: state.lead.leadListLoading,\r\n        leadListMeta: state.lead.leadListMeta,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        listAllLeads: () => dispatch(listAllLeads()),\r\n        updateLead: () => dispatch(updateLead()),\r\n        setLeadListLoading: () => dispatch(setLeadListLoading()),\r\n    };\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(Tours);\r\n"]},"metadata":{},"sourceType":"module"}