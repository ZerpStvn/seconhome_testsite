{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\SFelizardo\\\\Downloads\\\\secondhome\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\SFelizardo\\\\Downloads\\\\secondhome\\\\src\\\\app\\\\pages\\\\home-owner\\\\tour\\\\RescheduleTour.jsx\";\n\nimport React, { useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { DatePicker, Tabs, Skeleton, Empty, Collapse, Form, Input, Select, Table, Checkbox, Button, Card, Row, Col, Spin, List, Avatar, Modal } from \"antd\";\nimport { updateLead } from \"../../../redux/actions/lead-actions\";\nimport moment from 'moment';\n\nvar RescheduleTour = function RescheduleTour(props) {\n  console.log(props, 'sq');\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      scheduleModalVisible = _useState2[0],\n      setScheduleModalVisible = _useState2[1];\n\n  var _useState3 = useState(props.Date),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dateData = _useState4[0],\n      setDateData = _useState4[1];\n\n  var currentTime = new Date();\n  var hour = currentTime.getHours();\n  var minute = currentTime.getMinutes();\n\n  var toggleScheduleModal = function toggleScheduleModal() {\n    setScheduleModalVisible(!scheduleModalVisible);\n  };\n\n  var dateChangeHandler = function dateChangeHandler(fieldData, fieldValue) {\n    setDateData(moment(fieldValue)); // const data = { scheduled_date: fieldValue, tour_status: \"scheduled\" };\n    // props.updateLeadData(props.LeadId, data);\n    // toggleScheduleModal();\n  };\n\n  var handleSave = function handleSave() {\n    // console.log(dateData);\n    if (dateData) {\n      props.updateLeadData(props.LeadId, {\n        scheduled_date: dateData,\n        tour_status: \"scheduled\"\n      });\n      toggleScheduleModal();\n    }\n  };\n\n  var disabledDate = function disabledDate(current) {\n    // Can not select days before today and today\n    return current && current < moment().endOf('day');\n  };\n\n  var range = function range(start, end) {\n    var result = [];\n\n    for (var i = start; i < end; i++) {\n      result.push(i);\n    }\n\n    return result;\n  };\n\n  var disabledDateTime = function disabledDateTime() {\n    return {\n      disabledHours: function disabledHours() {\n        return range(0, hour);\n      },\n      disabledMinutes: function disabledMinutes() {\n        return range(0, minute);\n      } // disabledSeconds: () => [55, 56],\n\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    shape: \"round\",\n    onClick: toggleScheduleModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, props.buttonTitle), /*#__PURE__*/React.createElement(Modal, {\n    title: \"Select date & time to schedule your visit\",\n    visible: scheduleModalVisible,\n    onOk: handleSave,\n    okButtonProps: {\n      disabled: dateData ? false : true\n    },\n    onCancel: toggleScheduleModal,\n    okText: \"Schedule Tour\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    allowClear: false,\n    showTime: true,\n    id: \"datepicker\",\n    showNow: false,\n    format: \"MM-DD-YY hh:mm A\",\n    onChange: dateChangeHandler,\n    value: dateData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default RescheduleTour;","map":{"version":3,"sources":["C:/Users/SFelizardo/Downloads/secondhome/src/app/pages/home-owner/tour/RescheduleTour.jsx"],"names":["React","useState","useDispatch","DatePicker","Tabs","Skeleton","Empty","Collapse","Form","Input","Select","Table","Checkbox","Button","Card","Row","Col","Spin","List","Avatar","Modal","updateLead","moment","RescheduleTour","props","console","log","scheduleModalVisible","setScheduleModalVisible","Date","dateData","setDateData","currentTime","hour","getHours","minute","getMinutes","toggleScheduleModal","dateChangeHandler","fieldData","fieldValue","handleSave","updateLeadData","LeadId","scheduled_date","tour_status","disabledDate","current","endOf","range","start","end","result","i","push","disabledDateTime","disabledHours","disabledMinutes","buttonTitle","disabled"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { DatePicker, Tabs, Skeleton, Empty, Collapse, Form, Input, Select, Table, Checkbox, Button, Card, Row, Col, Spin, List, Avatar, Modal } from \"antd\";\r\nimport { updateLead } from \"../../../redux/actions/lead-actions\";\r\nimport moment from 'moment';\r\n\r\n\r\nconst RescheduleTour = (props) => {\r\n    console.log(props, 'sq');\r\n    const [scheduleModalVisible, setScheduleModalVisible] = useState(false);\r\n    const [dateData, setDateData] = useState(props.Date);\r\n    const currentTime = new Date();\r\n    const hour = currentTime.getHours();\r\n    const minute = currentTime.getMinutes();\r\n    const toggleScheduleModal = () => {\r\n        setScheduleModalVisible(!scheduleModalVisible);\r\n    }\r\n    const dateChangeHandler = (fieldData, fieldValue) => {\r\n        setDateData(moment(fieldValue));\r\n        // const data = { scheduled_date: fieldValue, tour_status: \"scheduled\" };\r\n        // props.updateLeadData(props.LeadId, data);\r\n        // toggleScheduleModal();\r\n    }\r\n    const handleSave = () => {\r\n        // console.log(dateData);\r\n        if (dateData) {\r\n            props.updateLeadData(props.LeadId, { scheduled_date: dateData, tour_status: \"scheduled\" });\r\n            toggleScheduleModal();\r\n        }\r\n\r\n    }\r\n    const disabledDate = (current) => {\r\n        // Can not select days before today and today\r\n        return current && current < moment().endOf('day');\r\n    }\r\n\r\n    const range = (start, end) => {\r\n        const result = [];\r\n        for (let i = start; i < end; i++) {\r\n            result.push(i);\r\n        }\r\n        return result;\r\n    };\r\n    const disabledDateTime = () => ({\r\n        disabledHours: () => range(0, hour),\r\n        disabledMinutes: () => range(0, minute),\r\n        // disabledSeconds: () => [55, 56],\r\n    });\r\n    return (\r\n        <>\r\n            <Button shape=\"round\" onClick={toggleScheduleModal}>{props.buttonTitle}</Button>\r\n            <Modal\r\n                title=\"Select date & time to schedule your visit\"\r\n                visible={scheduleModalVisible}\r\n                onOk={handleSave}\r\n                okButtonProps={{ disabled: dateData ? false : true }}\r\n                onCancel={toggleScheduleModal}\r\n                okText='Schedule Tour'\r\n            >\r\n                <DatePicker allowClear={false} showTime id='datepicker' showNow={false} format=\"MM-DD-YY hh:mm A\" onChange={dateChangeHandler} value={dateData} />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default RescheduleTour;"]},"metadata":{},"sourceType":"module"}