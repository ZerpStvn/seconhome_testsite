{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"prefixCls\", \"direction\", \"options\", \"disabled\", \"defaultValue\", \"value\", \"onChange\", \"className\", \"motionName\"];\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport CSSMotion from 'rc-motion';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport omit from \"rc-util/es/omit\";\n\nfunction getValidTitle(option) {\n  if (typeof option.title !== 'undefined') {\n    return option.title;\n  } // read `label` when title is `undefined`\n\n\n  if (_typeof(option.label) !== 'object') {\n    var _option$label;\n\n    return (_option$label = option.label) === null || _option$label === void 0 ? void 0 : _option$label.toString();\n  }\n}\n\nfunction normalizeOptions(options) {\n  return options.map(function (option) {\n    if (_typeof(option) === 'object' && option !== null) {\n      var validTitle = getValidTitle(option);\n      return _objectSpread(_objectSpread({}, option), {}, {\n        title: validTitle\n      });\n    }\n\n    return {\n      label: option === null || option === void 0 ? void 0 : option.toString(),\n      title: option === null || option === void 0 ? void 0 : option.toString(),\n      value: option\n    };\n  });\n}\n\nvar calcThumbStyle = function calcThumbStyle(targetElement) {\n  return {\n    transform: \"translateX(\".concat(targetElement.offsetLeft, \"px)\"),\n    width: targetElement.clientWidth\n  };\n};\n\nvar InternalSegmentedOption = function InternalSegmentedOption(_ref) {\n  var prefixCls = _ref.prefixCls,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      checked = _ref.checked,\n      label = _ref.label,\n      title = _ref.title,\n      value = _ref.value,\n      onChange = _ref.onChange;\n\n  var handleChange = function handleChange(event) {\n    if (disabled) {\n      return;\n    }\n\n    onChange(event, value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"label\", {\n    className: classNames(\"\".concat(prefixCls, \"-item\"), className, _defineProperty({}, \"\".concat(prefixCls, \"-item-disabled\"), disabled))\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"\".concat(prefixCls, \"-item-input\"),\n    type: \"radio\",\n    disabled: disabled,\n    checked: checked,\n    onChange: handleChange\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-item-label\"),\n    title: title\n  }, label));\n};\n\nvar Segmented = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _segmentedOptions$, _classNames2;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-segmented' : _props$prefixCls,\n      direction = props.direction,\n      options = props.options,\n      disabled = props.disabled,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      onChange = props.onChange,\n      _props$className = props.className,\n      className = _props$className === void 0 ? '' : _props$className,\n      _props$motionName = props.motionName,\n      motionName = _props$motionName === void 0 ? 'thumb-motion' : _props$motionName,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var containerRef = React.useRef(null);\n  var mergedRef = composeRef(containerRef, ref);\n  var thumbMoveStatus = React.useRef({\n    from: null,\n    to: null\n  });\n  var segmentedOptions = React.useMemo(function () {\n    return normalizeOptions(options);\n  }, [options]);\n\n  var _useMergedState = useMergedState((_segmentedOptions$ = segmentedOptions[0]) === null || _segmentedOptions$ === void 0 ? void 0 : _segmentedOptions$.value, {\n    value: value,\n    defaultValue: defaultValue\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      selected = _useMergedState2[0],\n      setSelected = _useMergedState2[1];\n\n  var _React$useState = React.useState(selected),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visualSelected = _React$useState2[0],\n      setVisualSelected = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      thumbShow = _React$useState4[0],\n      setThumbShow = _React$useState4[1];\n\n  var calcThumbMoveStatus = function calcThumbMoveStatus(event) {\n    var _containerRef$current;\n\n    var toElement = event.target.closest(\".\".concat(prefixCls, \"-item\"));\n    var fromElement = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(\".\".concat(prefixCls, \"-item-selected\"));\n\n    if (fromElement && toElement && thumbMoveStatus.current) {\n      thumbMoveStatus.current.from = calcThumbStyle(fromElement);\n      thumbMoveStatus.current.to = calcThumbStyle(toElement);\n      setThumbShow(true);\n    }\n  };\n\n  var handleChange = function handleChange(event, val) {\n    if (disabled) {\n      return;\n    }\n\n    calcThumbMoveStatus(event);\n    setSelected(val);\n\n    if (onChange) {\n      var mutatedTarget = Object.create(event.target, {\n        value: {\n          value: val\n        }\n      });\n      var mutatedEvent = Object.create(event, {\n        target: {\n          value: mutatedTarget\n        }\n      });\n      onChange(mutatedEvent);\n    }\n  }; // --- motion event handlers for thumb move\n\n\n  var handleThumbEnterStart = function handleThumbEnterStart() {\n    var fromStyle = thumbMoveStatus.current.from;\n\n    if (fromStyle) {\n      setVisualSelected(undefined);\n      return fromStyle;\n    }\n  };\n\n  var handleThumbEnterActive = function handleThumbEnterActive() {\n    var toStyle = thumbMoveStatus.current.to;\n\n    if (toStyle) {\n      return toStyle;\n    }\n  };\n\n  var handleThumbEnterEnd = function handleThumbEnterEnd() {\n    setThumbShow(false);\n    setVisualSelected(selected);\n\n    if (thumbMoveStatus.current) {\n      thumbMoveStatus.current = {\n        from: null,\n        to: null\n      };\n    }\n  };\n\n  var divProps = omit(restProps, ['children']);\n  return /*#__PURE__*/React.createElement(\"div\", _objectSpread(_objectSpread({}, divProps), {}, {\n    className: classNames(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-disabled\"), disabled), _classNames2), className),\n    ref: mergedRef\n  }), /*#__PURE__*/React.createElement(CSSMotion, {\n    visible: thumbShow,\n    motionName: \"\".concat(prefixCls, \"-\").concat(motionName),\n    motionDeadline: 300,\n    onEnterStart: handleThumbEnterStart,\n    onEnterActive: handleThumbEnterActive,\n    onEnterEnd: handleThumbEnterEnd\n  }, function (_ref2) {\n    var motionClassName = _ref2.className,\n        motionStyle = _ref2.style;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: motionStyle,\n      className: classNames(\"\".concat(prefixCls, \"-thumb\"), motionClassName)\n    });\n  }), segmentedOptions.map(function (segmentedOption) {\n    return /*#__PURE__*/React.createElement(InternalSegmentedOption, _objectSpread({\n      key: segmentedOption.value,\n      prefixCls: prefixCls,\n      className: classNames(segmentedOption.className, _defineProperty({}, \"\".concat(prefixCls, \"-item-selected\"), segmentedOption.value === visualSelected)),\n      checked: segmentedOption.value === selected,\n      onChange: handleChange\n    }, segmentedOption));\n  }));\n});\nSegmented.displayName = 'Segmented';\nSegmented.defaultProps = {\n  options: []\n};\nexport default Segmented;","map":null,"metadata":{},"sourceType":"module"}