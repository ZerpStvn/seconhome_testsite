{"ast":null,"code":"import _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\src\\\\app\\\\pages\\\\admin\\\\client\\\\mainSearch.js\";\n\nimport React, { useState } from \"react\";\nimport { GoogleApiWrapper } from \"google-maps-react\";\n\nvar SearchSuggestions = function SearchSuggestions(_ref) {\n  var google = _ref.google;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      suggestions = _useState4[0],\n      setSuggestions = _useState4[1];\n\n  var handleInputChange = function handleInputChange(e) {\n    var value = e.target.value;\n    setSearchTerm(value);\n\n    if (value) {\n      var service = new google.maps.places.AutocompleteService();\n      service.getPlacePredictions({\n        input: value,\n        types: [\"(cities)\", \"geocode\"]\n      }, function (predictions, status) {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          setSuggestions(predictions);\n        } else {\n          setSuggestions([]);\n        }\n      });\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: searchTerm,\n    onChange: handleInputChange,\n    placeholder: \"Search...\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, suggestions.map(function (suggestion) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: suggestion.place_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, suggestion.types[0]), \": \", suggestion.description);\n  })));\n};\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyA6eaMRrfLzlYUe-H1sL6D9tkVXjS6O7BQ\"\n})(SearchSuggestions);","map":{"version":3,"sources":["C:/xampp/htdocs/wordpress/dashboard/src/app/pages/admin/client/mainSearch.js"],"names":["React","useState","GoogleApiWrapper","SearchSuggestions","google","searchTerm","setSearchTerm","suggestions","setSuggestions","handleInputChange","e","value","target","service","maps","places","AutocompleteService","getPlacePredictions","input","types","predictions","status","PlacesServiceStatus","OK","map","suggestion","place_id","description","apiKey"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,gBAAT,QAAiC,mBAAjC;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAgB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAAA,kBACJH,QAAQ,CAAC,EAAD,CADJ;AAAA;AAAA,MACjCI,UADiC;AAAA,MACrBC,aADqB;;AAAA,mBAEFL,QAAQ,CAAC,EAAD,CAFN;AAAA;AAAA,MAEjCM,WAFiC;AAAA,MAEpBC,cAFoB;;AAIxC,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,CAAD,EAAO;AAAA,QACvBC,KADuB,GACbD,CAAC,CAACE,MADW,CACvBD,KADuB;AAE/BL,IAAAA,aAAa,CAACK,KAAD,CAAb;;AAEA,QAAIA,KAAJ,EAAW;AACT,UAAME,OAAO,GAAG,IAAIT,MAAM,CAACU,IAAP,CAAYC,MAAZ,CAAmBC,mBAAvB,EAAhB;AACAH,MAAAA,OAAO,CAACI,mBAAR,CACE;AAAEC,QAAAA,KAAK,EAAEP,KAAT;AAAgBQ,QAAAA,KAAK,EAAE,CAAC,UAAD,EAAa,SAAb;AAAvB,OADF,EAEE,UAACC,WAAD,EAAcC,MAAd,EAAyB;AACvB,YAAIA,MAAM,KAAKjB,MAAM,CAACU,IAAP,CAAYC,MAAZ,CAAmBO,mBAAnB,CAAuCC,EAAtD,EAA0D;AACxDf,UAAAA,cAAc,CAACY,WAAD,CAAd;AACD,SAFD,MAEO;AACLZ,UAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,OARH;AAUD,KAZD,MAYO;AACLA,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAnBD;;AAqBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAEH,UAFT;AAGE,IAAA,QAAQ,EAAEI,iBAHZ;AAIE,IAAA,WAAW,EAAC,WAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,WAAW,CAACiB,GAAZ,CAAgB,UAACC,UAAD;AAAA,wBACf;AAAI,MAAA,GAAG,EAAEA,UAAU,CAACC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASD,UAAU,CAACN,KAAX,CAAiB,CAAjB,CAAT,CADF,QAC2CM,UAAU,CAACE,WADtD,CADe;AAAA,GAAhB,CADH,CAPF,CADF;AAiBD,CA1CD;;AA4CA,eAAezB,gBAAgB,CAAC;AAC9B0B,EAAAA,MAAM,EAAE;AADsB,CAAD,CAAhB,CAEZzB,iBAFY,CAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nconst SearchSuggestions = ({ google }) => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { value } = e.target;\r\n    setSearchTerm(value);\r\n\r\n    if (value) {\r\n      const service = new google.maps.places.AutocompleteService();\r\n      service.getPlacePredictions(\r\n        { input: value, types: [\"(cities)\", \"geocode\"] },\r\n        (predictions, status) => {\r\n          if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n            setSuggestions(predictions);\r\n          } else {\r\n            setSuggestions([]);\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={searchTerm}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Search...\"\r\n      />\r\n      <ul>\r\n        {suggestions.map((suggestion) => (\r\n          <li key={suggestion.place_id}>\r\n            <strong>{suggestion.types[0]}</strong>: {suggestion.description}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyA6eaMRrfLzlYUe-H1sL6D9tkVXjS6O7BQ\",\r\n})(SearchSuggestions);\r\n"]},"metadata":{},"sourceType":"module"}