{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\SFelizardo\\\\Desktop\\\\Projects\\\\secondhome\\\\second-home-referrals\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\SFelizardo\\\\Desktop\\\\Projects\\\\secondhome\\\\second-home-referrals\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\SFelizardo\\\\Desktop\\\\Projects\\\\secondhome\\\\second-home-referrals\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\SFelizardo\\\\Desktop\\\\Projects\\\\secondhome\\\\second-home-referrals\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\SFelizardo\\\\Desktop\\\\Projects\\\\secondhome\\\\second-home-referrals\\\\src\\\\app\\\\pages\\\\admin\\\\client\\\\send-message.jsx\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dropdown, Menu, InputNumber, Empty, Form, Input, Select, Radio, Checkbox, Button, Card, Row, Col, Spin, List, Avatar, Modal, Tooltip, Popconfirm, Switch } from \"antd\";\nimport leadClientAPI from \"../../../redux/api/lead-client-api\";\nimport { EditorState, convertToRaw, convertFromHTML, ContentState } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nvar Option = Select.Option;\n\nvar sendMessage = function sendMessage(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      sendMessageModal = _useState2[0],\n      setSendMessageModal = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messageDataConfig = _useState4[0],\n      setMessageDataConfig = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messageData = _useState6[0],\n      setMessageData = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      messagePreview = _useState8[0],\n      setMessagePreview = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      EditMessageVisible = _useState10[0],\n      setEditMessageVisible = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      loading = _useState12[0],\n      setLoading = _useState12[1];\n\n  var client = props.client;\n\n  var _useState13 = useState(EditorState.createEmpty()),\n      _useState14 = _slicedToArray(_useState13, 2),\n      editorState = _useState14[0],\n      setEditorState = _useState14[1];\n\n  var sendMessageHandle = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var data, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              data = {\n                message: messagePreview.message,\n                home_ids: props.selectedHomes\n              };\n              _context.next = 4;\n              return leadClientAPI.sendMessage(data, client.id);\n\n            case 4:\n              response = _context.sent;\n              console.log(response);\n              setSendMessageModal(false);\n              props.unSelctHomes();\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendMessageHandle() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var sendMessageModalHandle = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (messageData) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 3;\n              return leadClientAPI.getEmailTemplate();\n\n            case 3:\n              response = _context2.sent;\n              setMessageDataConfig(response.data);\n              console.log(response.data);\n              setMessageData(true);\n\n            case 7:\n              setSendMessageModal(!sendMessageModal);\n              setLoading(false);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function sendMessageModalHandle() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onEditorStateChange = function onEditorStateChange(editorState) {\n    console.log(draftToHtml(convertToRaw(editorState.getCurrentContent())));\n    setEditorState(editorState);\n    setMessagePreview(function (Val) {\n      return _objectSpread({}, Val, {\n        \"message\": draftToHtml(convertToRaw(editorState.getCurrentContent()))\n      });\n    });\n  };\n\n  var messageNameHandle = function messageNameHandle(Value, Inhd) {\n    console.log(Value, Inhd);\n    var Data = messageDataConfig.filter(function (Item, Index) {\n      return Item.id == Value;\n    });\n    var blocksFromHTML = convertFromHTML(Data[0].message);\n    var content = ContentState.createFromBlockArray(blocksFromHTML.contentBlocks, blocksFromHTML.entityMap);\n    setEditorState(EditorState.createWithContent(content));\n    setMessagePreview(Data[0]);\n  };\n\n  var EditMessageVisibleHandle = function EditMessageVisibleHandle() {\n    setEditMessageVisible(!EditMessageVisible);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    onClick: sendMessageModalHandle,\n    disabled: !props.selectedHomes.length,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, \"Send Message\"), /*#__PURE__*/React.createElement(Modal, {\n    title: \"Send Message\",\n    visible: sendMessageModal,\n    onOk: sendMessageHandle,\n    okButtonProps: {\n      loading: loading\n    },\n    onCancel: sendMessageModalHandle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Message Name\",\n    name: \"messageName\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    onChange: messageNameHandle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, messageDataConfig.map(function (Item, Index) {\n    if (Item.status == \"publish\") {\n      return /*#__PURE__*/React.createElement(Option, {\n        value: Item.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 44\n        }\n      }, Item.name);\n    }\n  }))), messagePreview.message !== undefined ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Message Preview\",\n    name: \"messageName\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messagebkground\",\n    dangerouslySetInnerHTML: {\n      __html: messagePreview.message\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"text\",\n    onClick: EditMessageVisibleHandle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 33\n    }\n  }, \"Edit\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    style: {\n      display: EditMessageVisible ? \"block\" : \"none\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"message\",\n    label: \"Message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editbackground\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Editor, {\n    editorState: editorState,\n    wrapperClassName: \"demo-wrapper\",\n    editorClassName: \"demo-editor\",\n    onEditorStateChange: onEditorStateChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 41\n    }\n  }))))) : \" \")));\n};\n\nexport default sendMessage;","map":{"version":3,"sources":["C:/Users/SFelizardo/Desktop/Projects/secondhome/second-home-referrals/src/app/pages/admin/client/send-message.jsx"],"names":["React","useState","useEffect","Dropdown","Menu","InputNumber","Empty","Form","Input","Select","Radio","Checkbox","Button","Card","Row","Col","Spin","List","Avatar","Modal","Tooltip","Popconfirm","Switch","leadClientAPI","EditorState","convertToRaw","convertFromHTML","ContentState","Editor","draftToHtml","htmlToDraft","Option","sendMessage","props","sendMessageModal","setSendMessageModal","messageDataConfig","setMessageDataConfig","messageData","setMessageData","messagePreview","setMessagePreview","EditMessageVisible","setEditMessageVisible","loading","setLoading","client","createEmpty","editorState","setEditorState","sendMessageHandle","data","message","home_ids","selectedHomes","id","response","console","log","unSelctHomes","sendMessageModalHandle","getEmailTemplate","onEditorStateChange","getCurrentContent","Val","messageNameHandle","Value","Inhd","Data","filter","Item","Index","blocksFromHTML","content","createFromBlockArray","contentBlocks","entityMap","createWithContent","EditMessageVisibleHandle","length","map","status","name","undefined","__html","textAlign","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Dropdown, Menu, InputNumber, Empty, Form, Input, Select, Radio, Checkbox, Button, Card, Row, Col, Spin, List, Avatar, Modal, Tooltip, Popconfirm, Switch, } from \"antd\";\r\nimport leadClientAPI from \"../../../redux/api/lead-client-api\";\r\nimport { EditorState, convertToRaw, convertFromHTML, ContentState } from 'draft-js';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nconst { Option } = Select;\r\n\r\n\r\nconst sendMessage = (props) => {\r\n    const [sendMessageModal, setSendMessageModal] = useState(false);\r\n    const [messageDataConfig, setMessageDataConfig] = useState([]);\r\n    const [messageData, setMessageData] = useState(false);\r\n    const [messagePreview, setMessagePreview] = useState({});\r\n    const [EditMessageVisible, setEditMessageVisible] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const client = props.client;\r\n    const [editorState, setEditorState] = useState(\r\n        EditorState.createEmpty()\r\n    );\r\n    const sendMessageHandle = async () => {\r\n        setLoading(true)\r\n        let data = {\r\n            message: messagePreview.message,\r\n            home_ids: props.selectedHomes\r\n        }\r\n        let response = await leadClientAPI.sendMessage(data, client.id);\r\n        console.log(response);\r\n        setSendMessageModal(false);\r\n        props.unSelctHomes()\r\n\r\n    };\r\n\r\n    const sendMessageModalHandle = async () => {\r\n        if (!messageData) {\r\n            let response = await leadClientAPI.getEmailTemplate();\r\n            setMessageDataConfig(response.data);\r\n            console.log(response.data);\r\n            setMessageData(true);\r\n        }\r\n        setSendMessageModal(!sendMessageModal);\r\n        setLoading(false)\r\n    };\r\n\r\n    const onEditorStateChange = (editorState) => {\r\n        console.log(draftToHtml(convertToRaw(editorState.getCurrentContent())));\r\n        setEditorState(editorState);\r\n        setMessagePreview((Val) => {\r\n            return {\r\n                ...Val,\r\n                \"message\": draftToHtml(convertToRaw(editorState.getCurrentContent()))\r\n            }\r\n        });\r\n    }\r\n\r\n    const messageNameHandle = (Value, Inhd) => {\r\n        console.log(Value, Inhd);\r\n        let Data = messageDataConfig.filter((Item, Index) => {\r\n            return Item.id == Value;\r\n        });\r\n        const blocksFromHTML = convertFromHTML(Data[0].message);\r\n        const content = ContentState.createFromBlockArray(\r\n            blocksFromHTML.contentBlocks,\r\n            blocksFromHTML.entityMap\r\n        );\r\n        setEditorState(EditorState.createWithContent(content));\r\n        setMessagePreview(Data[0]);\r\n    };\r\n\r\n\r\n    const EditMessageVisibleHandle = () => {\r\n        setEditMessageVisible(!EditMessageVisible);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={sendMessageModalHandle} disabled={!props.selectedHomes.length}>Send Message</Button>\r\n            <Modal\r\n                title=\"Send Message\"\r\n                visible={sendMessageModal}\r\n                onOk={sendMessageHandle}\r\n                okButtonProps={{ loading: loading }}\r\n                onCancel={sendMessageModalHandle}\r\n            >\r\n                <Form layout=\"vertical\">\r\n                    <Form.Item label=\"Message Name\" name=\"messageName\">\r\n                        <Select onChange={messageNameHandle}>\r\n                            {messageDataConfig.map((Item, Index) => {\r\n                                if (Item.status == \"publish\") {\r\n                                    return <Option value={Item.id}>{Item.name}</Option>;\r\n                                }\r\n                            })}\r\n                        </Select>\r\n                    </Form.Item>\r\n                    {messagePreview.message !== undefined ? (\r\n                        <>\r\n                            <Form.Item label=\"Message Preview\" name=\"messageName\">\r\n                                <div\r\n                                    className=\"messagebkground\"\r\n                                    dangerouslySetInnerHTML={{\r\n                                        __html: messagePreview.message,\r\n                                    }}\r\n                                ></div>\r\n                            </Form.Item>\r\n                            <div style={{ textAlign: \"right\" }}>\r\n                                <Button\r\n                                    type=\"text\"\r\n                                    onClick={EditMessageVisibleHandle}\r\n                                >\r\n                                    Edit\r\n                                </Button>\r\n                            </div>\r\n                            <div className=\"\" style={{ display: EditMessageVisible ? \"block\" : \"none\" }}>\r\n                                <Form.Item\r\n                                    name=\"message\"\r\n                                    label=\"Message\"\r\n                                >\r\n                                    <div className=\"editbackground\">\r\n                                        <Editor\r\n                                            editorState={editorState}\r\n                                            wrapperClassName=\"demo-wrapper\"\r\n                                            editorClassName=\"demo-editor\"\r\n                                            onEditorStateChange={onEditorStateChange}\r\n                                        />\r\n                                    </div>\r\n                                </Form.Item>\r\n                            </div>\r\n\r\n                        </>\r\n                    ) : (\r\n                        \" \"\r\n                    )}\r\n                </Form>\r\n\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\nexport default sendMessage;"]},"metadata":{},"sourceType":"module"}