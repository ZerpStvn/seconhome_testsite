{"ast":null,"code":"import _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\src\\\\app\\\\pages\\\\admin\\\\client\\\\mainSearch.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Col, Input, Row } from \"antd\";\nimport \"../../../styles/autoComplete-search.css\";\n\nfunction MainSearch() {\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      autoComplete = _useState2[0],\n      setAutoComplete = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      autocompleteResults = _useState4[0],\n      setAutocompleteResults = _useState4[1];\n\n  var handleAutoCompleteView = function handleAutoCompleteView(data) {\n    setAutoComplete(true);\n    console.log(data);\n  };\n\n  var initializeAutocomplete = function initializeAutocomplete() {\n    var input = document.getElementById(\"search-input\");\n    var autocomplete = new window.google.maps.places.Autocomplete(input);\n    autocomplete.addListener(\"place_changed\", function () {\n      var place = autocomplete.getPlace();\n\n      if (!place.geometry) {\n        console.log(\"No location data available\");\n        return;\n      }\n\n      console.log(place); // This will log the selected place object with details like name, address, coordinates, etc.\n    });\n    autocomplete.addListener(\"predictions_changed\", function () {\n      var predictions = autocomplete.getPlacePredictions();\n      setAutocompleteResults(predictions);\n    });\n  };\n\n  useEffect(function () {\n    var googleMapsScript = document.createElement(\"script\");\n    googleMapsScript.src = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyA6eaMRrfLzlYUe-H1sL6D9tkVXjS6O7BQ&libraries=places\";\n    googleMapsScript.async = true;\n    googleMapsScript.defer = true;\n    window.document.body.appendChild(googleMapsScript);\n    googleMapsScript.addEventListener(\"load\", initializeAutocomplete);\n  }, []);\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"search-input\",\n    type: \"text\",\n    onChange: function onChange(e) {\n      handleAutoCompleteView(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), autoComplete && /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"auto_complete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"suggestion_City\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  }, \"CITIES\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 19\n    }\n  }, autocompleteResults.map(function (result) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: result.place_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 23\n      }\n    }, result.description);\n  }))))))));\n}\n\nexport default MainSearch;","map":{"version":3,"sources":["C:/xampp/htdocs/wordpress/dashboard/src/app/pages/admin/client/mainSearch.js"],"names":["React","useState","useEffect","Col","Input","Row","MainSearch","autoComplete","setAutoComplete","autocompleteResults","setAutocompleteResults","handleAutoCompleteView","data","console","log","initializeAutocomplete","input","document","getElementById","autocomplete","window","google","maps","places","Autocomplete","addListener","place","getPlace","geometry","predictions","getPlacePredictions","googleMapsScript","createElement","src","async","defer","body","appendChild","addEventListener","e","target","value","map","result","place_id","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Col, Input, Row } from \"antd\";\r\nimport \"../../../styles/autoComplete-search.css\";\r\n\r\nfunction MainSearch() {\r\n  const [autoComplete, setAutoComplete] = useState(false);\r\n  const [autocompleteResults, setAutocompleteResults] = useState([]);\r\n\r\n  const handleAutoCompleteView = (data) => {\r\n    setAutoComplete(true);\r\n    console.log(data);\r\n  };\r\n\r\n  const initializeAutocomplete = () => {\r\n    const input = document.getElementById(\"search-input\");\r\n    const autocomplete = new window.google.maps.places.Autocomplete(input);\r\n    autocomplete.addListener(\"place_changed\", () => {\r\n      const place = autocomplete.getPlace();\r\n      if (!place.geometry) {\r\n        console.log(\"No location data available\");\r\n        return;\r\n      }\r\n      console.log(place); // This will log the selected place object with details like name, address, coordinates, etc.\r\n    });\r\n    autocomplete.addListener(\"predictions_changed\", () => {\r\n      const predictions = autocomplete.getPlacePredictions();\r\n      setAutocompleteResults(predictions);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const googleMapsScript = document.createElement(\"script\");\r\n    googleMapsScript.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyA6eaMRrfLzlYUe-H1sL6D9tkVXjS6O7BQ&libraries=places`;\r\n    googleMapsScript.async = true;\r\n    googleMapsScript.defer = true;\r\n    window.document.body.appendChild(googleMapsScript);\r\n    googleMapsScript.addEventListener(\"load\", initializeAutocomplete);\r\n  }, []);\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={12}>\r\n        <Input\r\n          id=\"search-input\"\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            handleAutoCompleteView(e.target.value);\r\n          }}\r\n        />\r\n      </Col>\r\n      {autoComplete && (\r\n        <Col span={12}>\r\n          <div className=\"auto_complete\">\r\n            <ul>\r\n              <li>\r\n                <section className=\"suggestion_City\">\r\n                  <h2>CITIES</h2>\r\n                  <ul>\r\n                    {autocompleteResults.map((result) => (\r\n                      <li key={result.place_id}>{result.description}</li>\r\n                    ))}\r\n                  </ul>\r\n                </section>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </Col>\r\n      )}\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default MainSearch;\r\n"]},"metadata":{},"sourceType":"module"}