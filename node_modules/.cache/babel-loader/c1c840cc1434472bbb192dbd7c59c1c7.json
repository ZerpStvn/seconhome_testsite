{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\src\\\\app\\\\pages\\\\admin\\\\client\\\\availableRooms.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport UserService from \"../../../services/user-service\";\nimport API from \"../../../redux/api/lead-client-api\";\nimport { updateRoom } from '../../../redux/actions/room-actions';\nimport { housingTypesOptions } from \"../../../constants/defaultValues\";\nimport { Breadcrumb, Tabs, Tag, Table, Space, DatePicker } from \"antd\";\nimport moment from \"moment\";\nimport { humanize } from \"../../../helpers/string-helper\";\nimport DateAvailablePopOver from \"./date-available-popover\";\nimport { notifyUser } from \"../../../services/notification-service\";\nvar TabPane = Tabs.TabPane;\nvar dateFormat = \"MMM DD, YYYY\";\n\nvar AvailableRooms = function AvailableRooms(_ref) {\n  var history = _ref.history;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      submitted = _useState2[0],\n      setSubmitted = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userData = _useState4[0],\n      setUserData = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      availableRooms = _useState6[0],\n      setAvailableRooms = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      primaryClientLoaded = _useState8[0],\n      setPrimaryClientLoaded = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loading = _useState10[0],\n      setLoading = _useState10[1];\n\n  var user = UserService.getAdminUser();\n  useEffect(function () {\n    primaryClientLoaded && getPrimaryClient();\n  }, [primaryClientLoaded]);\n\n  var getPrimaryClient = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var leadClient, leadData, tempAvailableRooms;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return API.listAllLeadClients({\n                fields: \"*,leads.*,leads.home.*,leads.home.rooms.*\",\n                filter: {\n                  user: {\n                    _eq: user.id\n                  }\n                }\n              });\n\n            case 2:\n              leadClient = _context.sent;\n\n              if (leadClient.data) {\n                setUserData(leadClient.data[0]);\n                leadData = leadClient.data[0].leads;\n                tempAvailableRooms = [];\n                leadData.forEach(function (Item) {\n                  if (Item.home && Item.approval === \"accepted\") {\n                    console.log('Item.home:', Item.home);\n                    Item.home.rooms.forEach(function (room, index) {\n                      if (room.availability !== \"no\" && room.status === \"published\") {\n                        tempAvailableRooms.push({\n                          key: index,\n                          homeName: Item.home.name,\n                          roomId: Item.home.id,\n                          roomName: room.name,\n                          pricing: room.base_rate ? \"$\".concat(room.base_rate) : \"N/A\",\n                          floorLevel: room.floor_level ? room.floor_level : \"N/A\",\n                          roomCareType: room.room_care_type ? room.room_care_type.map(function (type) {\n                            var Data;\n                            housingTypesOptions.forEach(function (Item) {\n                              if (Item.value === type) {\n                                Data = /*#__PURE__*/React.createElement(Tag, {\n                                  color: \"blue\",\n                                  __self: _this,\n                                  __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 58,\n                                    columnNumber: 52\n                                  }\n                                }, humanize(Item.text));\n                              }\n                            });\n                            return Data;\n                          }) : \"NA\",\n                          room_type: room.type ? /*#__PURE__*/React.createElement(Tag, {\n                            color: \"blue\",\n                            __self: _this,\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 63,\n                              columnNumber: 56\n                            }\n                          }, humanize(room.type)) : \"N/A\",\n                          bathroom_type: room.bathroom_type ? humanize(room.bathroom_type) : \"N/A\",\n                          availability: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DateAvailablePopOver, {\n                            data: room,\n                            updateAvailableRoom: updateAvailableRoom,\n                            __self: _this,\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 66,\n                              columnNumber: 37\n                            }\n                          }))\n                        });\n                      }\n                    });\n                  }\n                });\n                setAvailableRooms(tempAvailableRooms);\n                setPrimaryClientLoaded(false);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getPrimaryClient() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var updateAvailableRoom = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, values) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              _context2.prev = 1;\n\n              if (!(values.availability && values.date_available)) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 5;\n              return dispatch(updateRoom(data.id, {\n                availability: values.availability,\n                date_available: values.date_available.format(\"YYYY-MM-DD\")\n              }));\n\n            case 5:\n              setLoading(false);\n              setPrimaryClientLoaded(true);\n\n            case 7:\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              notifyUser(JSON.parse(_context2.t0.response.data).errors[0].message, \"error\");\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9]]);\n    }));\n\n    return function updateAvailableRoom(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handelDateAvailableChange = function handelDateAvailableChange(date, dateString, roomId) {\n    dispatch(updateRoom(roomId, {\n      date_available: date.format(\"YYYY-MM-DD\")\n    }));\n  };\n\n  var columns = [{\n    title: 'Home Name',\n    dataIndex: 'homeName',\n    // sorter: {\n    //     compare: (a, b) => a.homeName - b.homeName,\n    //     multiple: 4,\n    // },\n    render: function render(text, roomId) {\n      return /*#__PURE__*/React.createElement(\"a\", {\n        className: \"home-name\",\n        href: \"/dashboard/home-detail/\".concat(roomId.roomId),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 18\n        }\n      }, text);\n    }\n  }, {\n    title: 'Room Name',\n    dataIndex: 'roomName' // sorter: {\n    //     compare: (a, b) => a.roomName - b.roomName,\n    //     multiple: 3,\n    // },\n\n  }, {\n    title: 'Pricing',\n    dataIndex: 'pricing' // sorter: {\n    //     compare: (a, b) => a.pricing - b.pricing,\n    //     multiple: 2,\n    // },\n    // render:()=>{\n    // }\n\n  }, {\n    title: 'Floor Level',\n    dataIndex: 'floorLevel' // sorter: {\n    //     compare: (a, b) => a.floorLevel - b.floorLevel,\n    //     multiple: 1,\n    // },\n\n  }, {\n    title: 'Room Care Type',\n    dataIndex: 'roomCareType' // sorter: {\n    //     compare: (a, b) => a.roomCareType - b.roomCareType,\n    //     multiple: 1,\n    // },\n\n  }, {\n    title: 'Room Type',\n    dataIndex: 'room_type' // sorter: {\n    //     compare: (a, b) => a.room_type - b.room_type,\n    //     multiple: 1,\n    // },\n\n  }, {\n    title: 'Bathroom Type',\n    dataIndex: 'bathroom_type' // sorter: {\n    //     compare: (a, b) => a.room_type - b.room_type,\n    //     multiple: 1,\n    // },\n\n  }, {\n    title: 'Availability Date',\n    dataIndex: 'availability' // sorter: {\n    //     compare: (a, b) => a.availability - b.availability,\n    //     multiple: 1,\n    // },\n    // render: (text) => {\n    //     if (!text) {\n    //         return \"N/A\";\n    //     }\n    //     var date = new Date(text);\n    //     var year = date.getFullYear();\n    //     var month = (1 + date.getMonth()).toString();\n    //     month = month.length > 1 ? month : '0' + month;\n    //     var day = date.getDate().toString();\n    //     day = day.length > 1 ? day : '0' + day;\n    //     return (\n    //         <Space size=\"middle\">\n    //             {`${month}/${day}/${year}`}\n    //         </Space>\n    //     )\n    // }\n\n  }];\n\n  function onChange(pagination, filters, sorter, extra) {\n    console.log('params', pagination, filters, sorter, extra);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }, \"Client\"), /*#__PURE__*/React.createElement(Breadcrumb.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }, humanize(userData.name)), /*#__PURE__*/React.createElement(Breadcrumb.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, \"Available Rooms\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    loading: primaryClientLoaded || loading,\n    columns: columns,\n    dataSource: availableRooms,\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  })));\n};\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AvailableRooms);","map":{"version":3,"sources":["C:/xampp/htdocs/wordpress/dashboard/src/app/pages/admin/client/availableRooms.js"],"names":["React","useState","useEffect","connect","useDispatch","UserService","API","updateRoom","housingTypesOptions","Breadcrumb","Tabs","Tag","Table","Space","DatePicker","moment","humanize","DateAvailablePopOver","notifyUser","TabPane","dateFormat","AvailableRooms","history","dispatch","submitted","setSubmitted","userData","setUserData","availableRooms","setAvailableRooms","primaryClientLoaded","setPrimaryClientLoaded","loading","setLoading","user","getAdminUser","getPrimaryClient","listAllLeadClients","fields","filter","_eq","id","leadClient","data","leadData","leads","tempAvailableRooms","forEach","Item","home","approval","console","log","rooms","room","index","availability","status","push","key","homeName","name","roomId","roomName","pricing","base_rate","floorLevel","floor_level","roomCareType","room_care_type","map","type","Data","value","text","room_type","bathroom_type","updateAvailableRoom","values","date_available","format","JSON","parse","response","errors","message","handelDateAvailableChange","date","dateString","columns","title","dataIndex","render","onChange","pagination","filters","sorter","extra","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport UserService from \"../../../services/user-service\";\r\nimport API from \"../../../redux/api/lead-client-api\";\r\nimport { updateRoom } from '../../../redux/actions/room-actions';\r\nimport { housingTypesOptions } from \"../../../constants/defaultValues\";\r\nimport { Breadcrumb, Tabs, Tag, Table, Space, DatePicker } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { humanize } from \"../../../helpers/string-helper\";\r\nimport DateAvailablePopOver from \"./date-available-popover\";\r\nimport { notifyUser } from \"../../../services/notification-service\";\r\n\r\nconst { TabPane } = Tabs;\r\nconst dateFormat = \"MMM DD, YYYY\";\r\nconst AvailableRooms = ({ history }) => {\r\n    const dispatch = useDispatch();\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [userData, setUserData] = useState({});\r\n\r\n    const [availableRooms, setAvailableRooms] = useState([]);\r\n\r\n    const [primaryClientLoaded, setPrimaryClientLoaded] = useState(true);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const user = UserService.getAdminUser();\r\n\r\n\r\n    useEffect(() => {\r\n        primaryClientLoaded && getPrimaryClient();\r\n    }, [primaryClientLoaded]);\r\n\r\n\r\n    const getPrimaryClient = async () => {\r\n        var leadClient = await API.listAllLeadClients({ fields: \"*,leads.*,leads.home.*,leads.home.rooms.*\", filter: { user: { _eq: user.id } } });\r\n        if (leadClient.data) {\r\n            setUserData(leadClient.data[0]);\r\n            let leadData = leadClient.data[0].leads;\r\n            let tempAvailableRooms = [];\r\n            leadData.forEach((Item) => {\r\n                if (Item.home && Item.approval === \"accepted\") {\r\n                    console.log('Item.home:',Item.home);\r\n                    Item.home.rooms.forEach((room, index) => {\r\n                        if (room.availability !== \"no\" && room.status === \"published\") {\r\n                            tempAvailableRooms.push({\r\n                                key: index,\r\n                                homeName: Item.home.name,\r\n                                roomId: Item.home.id,\r\n                                roomName: room.name,\r\n                                pricing: room.base_rate ? `$${room.base_rate}` : \"N/A\",\r\n                                floorLevel: room.floor_level ? room.floor_level : \"N/A\",\r\n                                roomCareType: room.room_care_type ? room.room_care_type.map((type) => {\r\n                                    let Data;\r\n                                    housingTypesOptions.forEach((Item) => {\r\n                                        if (Item.value === type) {\r\n                                            Data = <Tag color=\"blue\">{humanize(Item.text)}</Tag>\r\n                                        }\r\n                                    });\r\n                                    return Data;\r\n                                }) : \"NA\",\r\n                                room_type: room.type ? <Tag color=\"blue\">{humanize(room.type)}</Tag> : \"N/A\",\r\n                                bathroom_type: room.bathroom_type ? humanize(room.bathroom_type) : \"N/A\",\r\n                                availability: <>\r\n                                    <DateAvailablePopOver data={room} updateAvailableRoom={updateAvailableRoom} />\r\n                                    {/* <Space direction=\"vertical\" size=\"middle\">\r\n                                        <DatePicker\r\n                                            format={dateFormat}\r\n                                            allowClear={false}\r\n                                            defaultValue={room.date_available && moment(room.date_available, \"YYYY-MM-DD\")}\r\n                                            onChange={(date, dateString) =>\r\n                                                handelDateAvailableChange(date, dateString, room.id)\r\n                                            }\r\n                                        />\r\n                                    </Space> */}\r\n                                </>\r\n                            });\r\n                        }\r\n\r\n                    });\r\n                }\r\n\r\n\r\n\r\n            });\r\n            setAvailableRooms(tempAvailableRooms);\r\n\r\n            setPrimaryClientLoaded(false);\r\n\r\n        }\r\n    }\r\n\r\n    const updateAvailableRoom = async (data, values) => {\r\n        setLoading(true)\r\n        try {\r\n            if (values.availability && values.date_available) {\r\n                await dispatch(updateRoom(data.id, { availability: values.availability, date_available: values.date_available.format(\"YYYY-MM-DD\") }));\r\n                setLoading(false);\r\n                setPrimaryClientLoaded(true)\r\n\r\n            }\r\n        } catch (error) {\r\n            notifyUser(JSON.parse(error.response.data).errors[0].message, \"error\");\r\n        }\r\n        // dispatch(updateRoom(roomId, { date_available: date.format(\"YYYY-MM-DD\") }));\r\n    }\r\n\r\n    const handelDateAvailableChange = (date, dateString, roomId) => {\r\n        dispatch(updateRoom(roomId, { date_available: date.format(\"YYYY-MM-DD\") }));\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Home Name',\r\n            dataIndex: 'homeName',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.homeName - b.homeName,\r\n            //     multiple: 4,\r\n            // },\r\n            render: (text, roomId) => (\r\n                (<a className=\"home-name\" href={`/dashboard/home-detail/${roomId.roomId}`}>{text}</a>)\r\n                // <Space size=\"middle\">\r\n                //   <Link to={`/admin/partners/communities/${homeId}/rooms/${room.key}`}>{text}</Link>\r\n        \r\n                // </Space>\r\n            )\r\n        },\r\n        {\r\n            title: 'Room Name',\r\n            dataIndex: 'roomName',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.roomName - b.roomName,\r\n            //     multiple: 3,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Pricing',\r\n            dataIndex: 'pricing',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.pricing - b.pricing,\r\n            //     multiple: 2,\r\n            // },\r\n            // render:()=>{\r\n\r\n            // }\r\n        },\r\n        {\r\n            title: 'Floor Level',\r\n            dataIndex: 'floorLevel',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.floorLevel - b.floorLevel,\r\n            //     multiple: 1,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Room Care Type',\r\n            dataIndex: 'roomCareType',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.roomCareType - b.roomCareType,\r\n            //     multiple: 1,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Room Type',\r\n            dataIndex: 'room_type',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.room_type - b.room_type,\r\n            //     multiple: 1,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Bathroom Type',\r\n            dataIndex: 'bathroom_type',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.room_type - b.room_type,\r\n            //     multiple: 1,\r\n            // },\r\n        },\r\n        {\r\n            title: 'Availability Date',\r\n            dataIndex: 'availability',\r\n            // sorter: {\r\n            //     compare: (a, b) => a.availability - b.availability,\r\n            //     multiple: 1,\r\n            // },\r\n            // render: (text) => {\r\n            //     if (!text) {\r\n            //         return \"N/A\";\r\n            //     }\r\n            //     var date = new Date(text);\r\n            //     var year = date.getFullYear();\r\n\r\n            //     var month = (1 + date.getMonth()).toString();\r\n            //     month = month.length > 1 ? month : '0' + month;\r\n\r\n            //     var day = date.getDate().toString();\r\n            //     day = day.length > 1 ? day : '0' + day;\r\n\r\n            //     return (\r\n            //         <Space size=\"middle\">\r\n            //             {`${month}/${day}/${year}`}\r\n            //         </Space>\r\n            //     )\r\n            // }\r\n        },\r\n    ];\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Breadcrumb>\r\n                <Breadcrumb.Item>Client</Breadcrumb.Item>\r\n                <Breadcrumb.Item>{humanize(userData.name)}</Breadcrumb.Item>\r\n                <Breadcrumb.Item>Available Rooms</Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <div>\r\n\r\n                <Table loading={primaryClientLoaded || loading} columns={columns} dataSource={availableRooms} onChange={onChange} />\r\n            </div>\r\n\r\n        </React.Fragment >\r\n    );\r\n};\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AvailableRooms);\r\n"]},"metadata":{},"sourceType":"module"}