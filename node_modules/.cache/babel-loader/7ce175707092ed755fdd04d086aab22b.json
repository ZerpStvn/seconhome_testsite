{"ast":null,"code":"import _objectSpread from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\src\\\\app\\\\components\\\\autocomplete.js\";\nimport { Input } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/autoComplete-search.css\";\n\nfunction AutoCompleteComponent(_ref) {\n  var _this = this;\n\n  var onSearch = _ref.onSearch;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      autoComplete = _useState2[0],\n      setAutoComplete = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      citySuggestions = _useState4[0],\n      setCitySuggestions = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      neighborhoodSuggestions = _useState6[0],\n      setNeighborhoodSuggestions = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      countySuggestions = _useState8[0],\n      setCountySuggestions = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isNumber = _useState10[0],\n      setIsNumber = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      zipcodeSuggestions = _useState12[0],\n      setZipcodeSuggestions = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      datavalue = _useState14[0],\n      setDataValue = _useState14[1];\n\n  useEffect(function () {\n    var script = document.createElement(\"script\");\n    script.src = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyA6eaMRrfLzlYUe-H1sL6D9tkVXjS6O7BQ&libraries=places\";\n    script.async = true;\n    script.defer = true;\n    document.body.appendChild(script);\n    return function () {\n      document.body.removeChild(script);\n    };\n  }, []);\n\n  var handleAutoCompleteView = function handleAutoCompleteView(data) {\n    var trimmedData = data.trim();\n\n    if (trimmedData !== \"\") {\n      setAutoComplete(true);\n\n      if (!isNaN(trimmedData)) {\n        setIsNumber(true);\n        fetchZipcode(trimmedData);\n      } else {\n        setIsNumber(false);\n        fetchCity(trimmedData);\n      }\n\n      fetchNeighborhood(trimmedData);\n      fetchCounty(trimmedData);\n    } else {\n      setAutoComplete(false);\n      setCitySuggestions([]);\n      setNeighborhoodSuggestions([]);\n      setCountySuggestions([]);\n      setZipcodeSuggestions([]);\n    }\n  };\n\n  var fetchCity = function fetchCity(input) {\n    var autocompleteService = new window.google.maps.places.AutocompleteService();\n    autocompleteService.getPlacePredictions({\n      input: input,\n      types: [\"(cities)\"],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }, function (predictions, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        var simplifiedSuggestions = predictions.map(function (prediction) {\n          var cityName = prediction.structured_formatting.main_text;\n          var state = prediction.structured_formatting.secondary_text.split(\",\")[0];\n          return _objectSpread({}, prediction, {\n            cityName: cityName,\n            state: state\n          });\n        });\n        setCitySuggestions(simplifiedSuggestions);\n      }\n    });\n  };\n\n  var fetchNeighborhood = function fetchNeighborhood(input) {\n    var autocompleteService = new window.google.maps.places.AutocompleteService();\n    autocompleteService.getPlacePredictions({\n      input: input,\n      types: [\"neighborhood\"],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }, function (predictions, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        var simplifiedSuggestions = predictions.map(function (prediction) {\n          var neighborhoodName = prediction.structured_formatting.main_text;\n          var city = prediction.structured_formatting.secondary_text.split(\",\")[0];\n          var state = prediction.structured_formatting.secondary_text.split(\",\")[1];\n          return _objectSpread({}, prediction, {\n            neighborhoodName: neighborhoodName,\n            state: state,\n            city: city\n          });\n        });\n        setNeighborhoodSuggestions(simplifiedSuggestions);\n      }\n    });\n  };\n\n  var fetchCounty = function fetchCounty(input) {\n    var autocompleteService = new window.google.maps.places.AutocompleteService();\n    autocompleteService.getPlacePredictions({\n      input: input,\n      types: [\"administrative_area_level_2\"],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }, function (predictions, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        var simplifiedSuggestions = predictions.map(function (prediction) {\n          var countyName = prediction.structured_formatting.main_text;\n          var state = prediction.structured_formatting.secondary_text.split(\",\")[0];\n          return _objectSpread({}, prediction, {\n            countyName: countyName,\n            state: state\n          });\n        });\n        setCountySuggestions(simplifiedSuggestions);\n      }\n    });\n  };\n\n  var fetchZipcode = function fetchZipcode(input) {\n    var autocompleteService = new window.google.maps.places.AutocompleteService();\n    autocompleteService.getPlacePredictions({\n      input: input,\n      types: [\"postal_code\"],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }, function (predictions, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        var simplifiedSuggestions = predictions.map(function (prediction) {\n          var postalCode = prediction.structured_formatting.main_text;\n          var city = prediction.structured_formatting.secondary_text.split(\",\")[0];\n          var state = prediction.structured_formatting.secondary_text.split(\",\")[1].trim();\n          return _objectSpread({}, prediction, {\n            postalCode: postalCode,\n            state: state,\n            city: city\n          });\n        });\n        setZipcodeSuggestions(simplifiedSuggestions);\n      }\n    });\n  };\n\n  var handleOnSearch = function handleOnSearch(data) {\n    var datadocs = document.getElementById(\"input_search\").value = data;\n    onSearch(data);\n    setAutoComplete(false);\n  };\n\n  var Search = Input.Search;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    placeholder: \"City, ZIP, Neighborhood , Address\",\n    type: \"text\",\n    allowClear: true,\n    id: \"input_search\",\n    size: \"large\",\n    className: \"main_search\",\n    onChange: function onChange(e) {\n      handleAutoCompleteView(e.target.value);\n    },\n    onSearch: onSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }), autoComplete && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"auto_complete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, isNumber ? /*#__PURE__*/React.createElement(\"section\", {\n    className: \"suggestion suggestion_zipcode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 19\n    }\n  }, \"ZIP CODES\"), zipcodeSuggestions.map(function (suggestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"top_row\",\n      key: suggestion.place_id,\n      onClick: function onClick() {\n        return handleOnSearch(suggestion.postalCode);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/svg/location-dot-solid.svg\",\n      alt: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mainTitle\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }\n    }, suggestion.postalCode), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"colm_row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 27\n      }\n    }, suggestion.city, \",\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 27\n      }\n    }, suggestion.state))));\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"suggestion suggestion_City\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }\n  }, \"CITIES\"), citySuggestions.map(function (suggestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"top_row\",\n      key: suggestion.place_id,\n      onClick: function onClick() {\n        return handleOnSearch(suggestion.cityName);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/svg/location-dot-solid.svg\",\n      alt: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mainTitle\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 27\n      }\n    }, suggestion.cityName), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 27\n      }\n    }, suggestion.state)));\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"suggestion suggestion_neighborhood\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 21\n    }\n  }, \"NEIGHBORHOODS\"), neighborhoodSuggestions.map(function (suggestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"top_row\",\n      key: suggestion.place_id,\n      onClick: function onClick() {\n        return handleOnSearch(suggestion.neighborhoodName);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/svg/location-crosshairs-solid.svg\",\n      alt: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mainTitle\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 27\n      }\n    }, suggestion.neighborhoodName), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"colm_row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 29\n      }\n    }, suggestion.city, \",\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 29\n      }\n    }, suggestion.state))));\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"suggestion suggestion_county\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 21\n    }\n  }, \"COUNTY\"), countySuggestions.map(function (suggestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"top_row\",\n      key: suggestion.place_id,\n      onClick: function onClick() {\n        return handleOnSearch(suggestion.countyName);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/svg/map-regular.svg\",\n      alt: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mainTitle\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 27\n      }\n    }, suggestion.countyName), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 27\n      }\n    }, suggestion.state)));\n  })))))));\n}\n\nexport default AutoCompleteComponent;","map":{"version":3,"sources":["C:/xampp/htdocs/wordpress/dashboard/src/app/components/autocomplete.js"],"names":["Input","React","useState","useEffect","AutoCompleteComponent","onSearch","autoComplete","setAutoComplete","citySuggestions","setCitySuggestions","neighborhoodSuggestions","setNeighborhoodSuggestions","countySuggestions","setCountySuggestions","isNumber","setIsNumber","zipcodeSuggestions","setZipcodeSuggestions","datavalue","setDataValue","script","document","createElement","src","async","defer","body","appendChild","removeChild","handleAutoCompleteView","data","trimmedData","trim","isNaN","fetchZipcode","fetchCity","fetchNeighborhood","fetchCounty","input","autocompleteService","window","google","maps","places","AutocompleteService","getPlacePredictions","types","componentRestrictions","country","predictions","status","PlacesServiceStatus","OK","simplifiedSuggestions","map","prediction","cityName","structured_formatting","main_text","state","secondary_text","split","neighborhoodName","city","countyName","postalCode","handleOnSearch","datadocs","getElementById","value","Search","e","target","suggestion","place_id"],"mappings":"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","sourcesContent":["import { Input } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"../styles/autoComplete-search.css\";\r\n\r\nfunction AutoCompleteComponent({ onSearch }) {\r\n  const [autoComplete, setAutoComplete] = useState(false);\r\n  const [citySuggestions, setCitySuggestions] = useState([]);\r\n  const [neighborhoodSuggestions, setNeighborhoodSuggestions] = useState([]);\r\n  const [countySuggestions, setCountySuggestions] = useState([]);\r\n  const [isNumber, setIsNumber] = useState(false);\r\n  const [zipcodeSuggestions, setZipcodeSuggestions] = useState([]);\r\n  const [datavalue, setDataValue] = useState(\"\");\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyA6eaMRrfLzlYUe-H1sL6D9tkVXjS6O7BQ&libraries=places`;\r\n    script.async = true;\r\n    script.defer = true;\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  const handleAutoCompleteView = (data) => {\r\n    const trimmedData = data.trim();\r\n\r\n    if (trimmedData !== \"\") {\r\n      setAutoComplete(true);\r\n\r\n      if (!isNaN(trimmedData)) {\r\n        setIsNumber(true);\r\n        fetchZipcode(trimmedData);\r\n      } else {\r\n        setIsNumber(false);\r\n        fetchCity(trimmedData);\r\n      }\r\n      fetchNeighborhood(trimmedData);\r\n      fetchCounty(trimmedData);\r\n    } else {\r\n      setAutoComplete(false);\r\n      setCitySuggestions([]);\r\n      setNeighborhoodSuggestions([]);\r\n      setCountySuggestions([]);\r\n      setZipcodeSuggestions([]);\r\n    }\r\n  };\r\n\r\n  const fetchCity = (input) => {\r\n    const autocompleteService = new window.google.maps.places.AutocompleteService();\r\n    autocompleteService.getPlacePredictions(\r\n      {\r\n        input: input,\r\n        types: [\"(cities)\"],\r\n        componentRestrictions: { country: \"us\" },\r\n      },\r\n      (predictions, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          const simplifiedSuggestions = predictions.map((prediction) => {\r\n            const cityName = prediction.structured_formatting.main_text;\r\n            const state = prediction.structured_formatting.secondary_text.split(\r\n              \",\"\r\n            )[0];\r\n            return {\r\n              ...prediction,\r\n              cityName: cityName,\r\n              state: state,\r\n            };\r\n          });\r\n          setCitySuggestions(simplifiedSuggestions);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const fetchNeighborhood = (input) => {\r\n    const autocompleteService = new window.google.maps.places.AutocompleteService();\r\n    autocompleteService.getPlacePredictions(\r\n      {\r\n        input: input,\r\n        types: [\"neighborhood\"],\r\n        componentRestrictions: { country: \"us\" },\r\n      },\r\n      (predictions, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          const simplifiedSuggestions = predictions.map((prediction) => {\r\n            const neighborhoodName = prediction.structured_formatting.main_text;\r\n            const city = prediction.structured_formatting.secondary_text.split(\r\n              \",\"\r\n            )[0];\r\n            const state = prediction.structured_formatting.secondary_text.split(\r\n              \",\"\r\n            )[1];\r\n            return {\r\n              ...prediction,\r\n              neighborhoodName: neighborhoodName,\r\n              state: state,\r\n              city: city,\r\n            };\r\n          });\r\n          setNeighborhoodSuggestions(simplifiedSuggestions);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const fetchCounty = (input) => {\r\n    const autocompleteService = new window.google.maps.places.AutocompleteService();\r\n    autocompleteService.getPlacePredictions(\r\n      {\r\n        input: input,\r\n        types: [\"administrative_area_level_2\"],\r\n        componentRestrictions: { country: \"us\" },\r\n      },\r\n      (predictions, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          const simplifiedSuggestions = predictions.map((prediction) => {\r\n            const countyName = prediction.structured_formatting.main_text;\r\n            const state = prediction.structured_formatting.secondary_text.split(\r\n              \",\"\r\n            )[0];\r\n            return { ...prediction, countyName: countyName, state: state };\r\n          });\r\n          setCountySuggestions(simplifiedSuggestions);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const fetchZipcode = (input) => {\r\n    const autocompleteService = new window.google.maps.places.AutocompleteService();\r\n    autocompleteService.getPlacePredictions(\r\n      {\r\n        input: input,\r\n        types: [\"postal_code\"],\r\n        componentRestrictions: { country: \"us\" },\r\n      },\r\n      (predictions, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          const simplifiedSuggestions = predictions.map((prediction) => {\r\n            const postalCode = prediction.structured_formatting.main_text;\r\n            const city = prediction.structured_formatting.secondary_text.split(\r\n              \",\"\r\n            )[0];\r\n            const state = prediction.structured_formatting.secondary_text\r\n              .split(\",\")[1]\r\n              .trim();\r\n\r\n            return {\r\n              ...prediction,\r\n              postalCode: postalCode,\r\n              state: state,\r\n              city: city,\r\n            };\r\n          });\r\n          setZipcodeSuggestions(simplifiedSuggestions);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleOnSearch = (data) => {\r\n    var datadocs = (document.getElementById(\"input_search\").value = data);\r\n    onSearch(data);\r\n    setAutoComplete(false);\r\n  };\r\n  const { Search } = Input;\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Search\r\n        placeholder=\"City, ZIP, Neighborhood , Address\"\r\n        type=\"text\"\r\n        allowClear\r\n        id=\"input_search\"\r\n        size=\"large\"\r\n        className=\"main_search\"\r\n        onChange={(e) => {\r\n          handleAutoCompleteView(e.target.value);\r\n        }}\r\n        onSearch={onSearch}\r\n      />\r\n      {autoComplete && (\r\n        <div className=\"auto_complete\">\r\n          <ul>\r\n            <li>\r\n              {isNumber ? (\r\n                <section className=\"suggestion suggestion_zipcode\">\r\n                  <h2>ZIP CODES</h2>\r\n                  {zipcodeSuggestions.map((suggestion) => (\r\n                    <div\r\n                      className=\"top_row\"\r\n                      key={suggestion.place_id}\r\n                      onClick={() => handleOnSearch(suggestion.postalCode)}\r\n                    >\r\n                      <img src=\"/svg/location-dot-solid.svg\" alt=\"\" />\r\n                      <div>\r\n                        <p className=\"mainTitle\">{suggestion.postalCode}</p>\r\n                        <div className=\"colm_row\">\r\n                          <span>{suggestion.city},</span>\r\n                          <span>{suggestion.state}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </section>\r\n              ) : (\r\n                <>\r\n                  <section className=\"suggestion suggestion_City\">\r\n                    <h2>CITIES</h2>\r\n                    {citySuggestions.map((suggestion) => (\r\n                      <div\r\n                        className=\"top_row\"\r\n                        key={suggestion.place_id}\r\n                        onClick={() => handleOnSearch(suggestion.cityName)}\r\n                      >\r\n                        <img src=\"/svg/location-dot-solid.svg\" alt=\"\" />\r\n                        <div>\r\n                          <p className=\"mainTitle\">{suggestion.cityName}</p>\r\n                          <span>{suggestion.state}</span>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </section>\r\n                  <section className=\"suggestion suggestion_neighborhood\">\r\n                    <h2>NEIGHBORHOODS</h2>\r\n                    {neighborhoodSuggestions.map((suggestion) => (\r\n                      <div\r\n                        className=\"top_row\"\r\n                        key={suggestion.place_id}\r\n                        onClick={() =>\r\n                          handleOnSearch(suggestion.neighborhoodName)\r\n                        }\r\n                      >\r\n                        <img src=\"/svg/location-crosshairs-solid.svg\" alt=\"\" />\r\n\r\n                        <div>\r\n                          <p className=\"mainTitle\">\r\n                            {suggestion.neighborhoodName}\r\n                          </p>\r\n                          <div className=\"colm_row\">\r\n                            <span>{suggestion.city},</span>\r\n                            <span>{suggestion.state}</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </section>\r\n                  <section className=\"suggestion suggestion_county\">\r\n                    <h2>COUNTY</h2>\r\n                    {countySuggestions.map((suggestion) => (\r\n                      <div\r\n                        className=\"top_row\"\r\n                        key={suggestion.place_id}\r\n                        onClick={() => handleOnSearch(suggestion.countyName)}\r\n                      >\r\n                        <img src=\"/svg/map-regular.svg\" alt=\"\" />\r\n                        <div>\r\n                          <p className=\"mainTitle\">{suggestion.countyName}</p>\r\n                          <span>{suggestion.state}</span>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </section>\r\n                </>\r\n              )}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AutoCompleteComponent;\r\n"]},"metadata":{},"sourceType":"module"}