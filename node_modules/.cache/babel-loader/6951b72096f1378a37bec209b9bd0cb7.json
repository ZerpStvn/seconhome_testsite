{"ast":null,"code":"import _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\wordpress\\\\dashboard\\\\src\\\\app\\\\pages\\\\admin\\\\client\\\\mainSearch.js\";\n\nimport React, { useState } from \"react\";\n\nvar MapComponent = function MapComponent() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      address = _useState2[0],\n      setAddress = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      predictions = _useState4[0],\n      setPredictions = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      category = _useState6[0],\n      setCategory = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      neighbors = _useState8[0],\n      setNeighbors = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      country = _useState10[0],\n      setCountry = _useState10[1];\n\n  var handleInputChange = function handleInputChange(event) {\n    setAddress(event.target.value);\n\n    if (event.target.value) {\n      getPlacePredictions(event.target.value);\n    } else {\n      setPredictions([]);\n    }\n  };\n\n  var getPlacePredictions = function getPlacePredictions(value) {\n    var service = new window.google.maps.places.AutocompleteService();\n    service.getPlacePredictions({\n      input: value,\n      types: [\"geocode\"] // Restrict to geocoding results\n\n    }, function (predictions, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        setPredictions(predictions);\n      }\n    });\n  };\n\n  var handleSelect = function handleSelect(prediction) {\n    setAddress(prediction.description);\n    setPredictions([]);\n    var service = new window.google.maps.places.PlacesService(document.createElement(\"div\"));\n    service.getDetails({\n      placeId: prediction.place_id,\n      fields: [\"address_components\", \"types\"]\n    }, function (place, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        var city = getAddressComponent(place, \"locality\");\n        var neighborhood = getAddressComponent(place, \"neighborhood\");\n\n        var _country = getAddressComponent(place, \"country\");\n\n        setCategory(city);\n        setNeighbors(neighborhood ? [neighborhood] : []);\n        setCountry(_country);\n      }\n    });\n  };\n\n  var getAddressComponent = function getAddressComponent(place, type) {\n    var component = place.address_components.find(function (component) {\n      return component.types.indexOf(type) !== -1;\n    });\n    return component ? component.long_name : \"\";\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: address,\n    onChange: handleInputChange,\n    placeholder: \"Enter a location\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), predictions.length > 0 && /*#__PURE__*/React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, predictions.map(function (prediction) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: prediction.place_id,\n      onClick: function onClick() {\n        return handleSelect(prediction);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, prediction.description);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Category: \", category), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Neighbors: \", neighbors.join(\", \")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"Country: \", country)));\n};\n\nexport default MapComponent;","map":{"version":3,"sources":["C:/xampp/htdocs/wordpress/dashboard/src/app/pages/admin/client/mainSearch.js"],"names":["React","useState","MapComponent","address","setAddress","predictions","setPredictions","category","setCategory","neighbors","setNeighbors","country","setCountry","handleInputChange","event","target","value","getPlacePredictions","service","window","google","maps","places","AutocompleteService","input","types","status","PlacesServiceStatus","OK","handleSelect","prediction","description","PlacesService","document","createElement","getDetails","placeId","place_id","fields","place","city","getAddressComponent","neighborhood","type","component","address_components","find","indexOf","long_name","length","map","join"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst MapComponent = () => {\r\n  const [address, setAddress] = useState(\"\");\r\n  const [predictions, setPredictions] = useState([]);\r\n  const [category, setCategory] = useState(\"\");\r\n  const [neighbors, setNeighbors] = useState([]);\r\n  const [country, setCountry] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setAddress(event.target.value);\r\n    if (event.target.value) {\r\n      getPlacePredictions(event.target.value);\r\n    } else {\r\n      setPredictions([]);\r\n    }\r\n  };\r\n\r\n  const getPlacePredictions = (value) => {\r\n    const service = new window.google.maps.places.AutocompleteService();\r\n    service.getPlacePredictions(\r\n      {\r\n        input: value,\r\n        types: [\"geocode\"], // Restrict to geocoding results\r\n      },\r\n      (predictions, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          setPredictions(predictions);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleSelect = (prediction) => {\r\n    setAddress(prediction.description);\r\n    setPredictions([]);\r\n\r\n    const service = new window.google.maps.places.PlacesService(\r\n      document.createElement(\"div\")\r\n    );\r\n    service.getDetails(\r\n      {\r\n        placeId: prediction.place_id,\r\n        fields: [\"address_components\", \"types\"],\r\n      },\r\n      (place, status) => {\r\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n          const city = getAddressComponent(place, \"locality\");\r\n          const neighborhood = getAddressComponent(place, \"neighborhood\");\r\n          const country = getAddressComponent(place, \"country\");\r\n\r\n          setCategory(city);\r\n          setNeighbors(neighborhood ? [neighborhood] : []);\r\n          setCountry(country);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const getAddressComponent = (place, type) => {\r\n    const component = place.address_components.find(\r\n      (component) => component.types.indexOf(type) !== -1\r\n    );\r\n    return component ? component.long_name : \"\";\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={address}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Enter a location\"\r\n      />\r\n      {predictions.length > 0 && (\r\n        <ul>\r\n          {predictions.map((prediction) => (\r\n            <li\r\n              key={prediction.place_id}\r\n              onClick={() => handleSelect(prediction)}\r\n            >\r\n              {prediction.description}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      <div>\r\n        <p>Category: {category}</p>\r\n        <p>Neighbors: {neighbors.join(\", \")}</p>\r\n        <p>Country: {country}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n"]},"metadata":{},"sourceType":"module"}