{"ast":null,"code":"var applyWatermark = function applyWatermark(file) {\n  return new Promise(function (resolve, reject) {\n    var canvas = document.createElement(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var image = new Image();\n\n    image.onload = function () {\n      var imageAspectRatio = image.width / image.height;\n      var canvasAspectRatio = canvas.width / canvas.height;\n      var width;\n      var height;\n      var offsetX = 0;\n      var offsetY = 0;\n\n      if (imageAspectRatio > canvasAspectRatio) {\n        width = canvas.width;\n        height = width / imageAspectRatio;\n        offsetY = (canvas.height - height) / 2;\n      } else {\n        height = canvas.height;\n        width = height * imageAspectRatio;\n        offsetX = (canvas.width - width) / 2;\n      }\n\n      context.drawImage(image, offsetX, offsetY, width, height); // Add your watermark logic here\n\n      var watermarkText = \"Second Home Seniors\";\n      context.font = \"20px Arial\";\n      context.fillStyle = \"rgba(255, 255, 255, 0.5)\";\n      context.textAlign = \"center\";\n      context.textBaseline = \"middle\";\n      context.fillText(watermarkText, canvas.width / 2, canvas.height / 2);\n      canvas.toBlob(function (blob) {\n        var watermarkedFile = new File([blob], file.name, {\n          type: file.type,\n          lastModified: Date.now()\n        });\n        resolve(watermarkedFile);\n      }, file.type);\n    };\n\n    image.onerror = function (error) {\n      return reject(error);\n    };\n\n    image.src = URL.createObjectURL(file);\n  });\n};","map":{"version":3,"sources":["C:/xampp/htdocs/wordpress/dashboard/src/app/components/upload-photos.js"],"names":["applyWatermark","file","Promise","resolve","reject","canvas","document","createElement","context","getContext","image","Image","onload","imageAspectRatio","width","height","canvasAspectRatio","offsetX","offsetY","drawImage","watermarkText","font","fillStyle","textAlign","textBaseline","fillText","toBlob","blob","watermarkedFile","File","name","type","lastModified","Date","now","onerror","error","src","URL","createObjectURL"],"mappings":"AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AAC/B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,QAAMC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB;AACA,QAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;;AAEAD,IAAAA,KAAK,CAACE,MAAN,GAAe,YAAM;AACnB,UAAMC,gBAAgB,GAAGH,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAACK,MAA7C;AACA,UAAMC,iBAAiB,GAAGX,MAAM,CAACS,KAAP,GAAeT,MAAM,CAACU,MAAhD;AAEA,UAAID,KAAJ;AACA,UAAIC,MAAJ;AACA,UAAIE,OAAO,GAAG,CAAd;AACA,UAAIC,OAAO,GAAG,CAAd;;AAEA,UAAIL,gBAAgB,GAAGG,iBAAvB,EAA0C;AACxCF,QAAAA,KAAK,GAAGT,MAAM,CAACS,KAAf;AACAC,QAAAA,MAAM,GAAGD,KAAK,GAAGD,gBAAjB;AACAK,QAAAA,OAAO,GAAG,CAACb,MAAM,CAACU,MAAP,GAAgBA,MAAjB,IAA2B,CAArC;AACD,OAJD,MAIO;AACLA,QAAAA,MAAM,GAAGV,MAAM,CAACU,MAAhB;AACAD,QAAAA,KAAK,GAAGC,MAAM,GAAGF,gBAAjB;AACAI,QAAAA,OAAO,GAAG,CAACZ,MAAM,CAACS,KAAP,GAAeA,KAAhB,IAAyB,CAAnC;AACD;;AAEDN,MAAAA,OAAO,CAACW,SAAR,CAAkBT,KAAlB,EAAyBO,OAAzB,EAAkCC,OAAlC,EAA2CJ,KAA3C,EAAkDC,MAAlD,EAnBmB,CAqBnB;;AACA,UAAMK,aAAa,GAAG,qBAAtB;AACAZ,MAAAA,OAAO,CAACa,IAAR,GAAe,YAAf;AACAb,MAAAA,OAAO,CAACc,SAAR,GAAoB,0BAApB;AACAd,MAAAA,OAAO,CAACe,SAAR,GAAoB,QAApB;AACAf,MAAAA,OAAO,CAACgB,YAAR,GAAuB,QAAvB;AACAhB,MAAAA,OAAO,CAACiB,QAAR,CAAiBL,aAAjB,EAAgCf,MAAM,CAACS,KAAP,GAAe,CAA/C,EAAkDT,MAAM,CAACU,MAAP,GAAgB,CAAlE;AAEAV,MAAAA,MAAM,CAACqB,MAAP,CAAc,UAACC,IAAD,EAAU;AACtB,YAAMC,eAAe,GAAG,IAAIC,IAAJ,CAAS,CAACF,IAAD,CAAT,EAAiB1B,IAAI,CAAC6B,IAAtB,EAA4B;AAClDC,UAAAA,IAAI,EAAE9B,IAAI,CAAC8B,IADuC;AAElDC,UAAAA,YAAY,EAAEC,IAAI,CAACC,GAAL;AAFoC,SAA5B,CAAxB;AAIA/B,QAAAA,OAAO,CAACyB,eAAD,CAAP;AACD,OAND,EAMG3B,IAAI,CAAC8B,IANR;AAOD,KApCD;;AAsCArB,IAAAA,KAAK,CAACyB,OAAN,GAAgB,UAACC,KAAD;AAAA,aAAWhC,MAAM,CAACgC,KAAD,CAAjB;AAAA,KAAhB;;AACA1B,IAAAA,KAAK,CAAC2B,GAAN,GAAYC,GAAG,CAACC,eAAJ,CAAoBtC,IAApB,CAAZ;AACD,GA7CM,CAAP;AA8CD,CA/CD","sourcesContent":["const applyWatermark = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const context = canvas.getContext(\"2d\");\r\n    const image = new Image();\r\n\r\n    image.onload = () => {\r\n      const imageAspectRatio = image.width / image.height;\r\n      const canvasAspectRatio = canvas.width / canvas.height;\r\n\r\n      let width;\r\n      let height;\r\n      let offsetX = 0;\r\n      let offsetY = 0;\r\n\r\n      if (imageAspectRatio > canvasAspectRatio) {\r\n        width = canvas.width;\r\n        height = width / imageAspectRatio;\r\n        offsetY = (canvas.height - height) / 2;\r\n      } else {\r\n        height = canvas.height;\r\n        width = height * imageAspectRatio;\r\n        offsetX = (canvas.width - width) / 2;\r\n      }\r\n\r\n      context.drawImage(image, offsetX, offsetY, width, height);\r\n\r\n      // Add your watermark logic here\r\n      const watermarkText = \"Second Home Seniors\";\r\n      context.font = \"20px Arial\";\r\n      context.fillStyle = \"rgba(255, 255, 255, 0.5)\";\r\n      context.textAlign = \"center\";\r\n      context.textBaseline = \"middle\";\r\n      context.fillText(watermarkText, canvas.width / 2, canvas.height / 2);\r\n\r\n      canvas.toBlob((blob) => {\r\n        const watermarkedFile = new File([blob], file.name, {\r\n          type: file.type,\r\n          lastModified: Date.now(),\r\n        });\r\n        resolve(watermarkedFile);\r\n      }, file.type);\r\n    };\r\n\r\n    image.onerror = (error) => reject(error);\r\n    image.src = URL.createObjectURL(file);\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}